/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using TalonOne.Client;
using TalonOne.Api;
using TalonOne.Model;

namespace TalonOne.Test
{
    /// <summary>
    ///  Class for testing IntegrationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class IntegrationApiTests
    {
        private IntegrationApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            var integrationConfig = new Configuration {
                BasePath = "http://host.docker.internal:9000",
                ApiKey = new Dictionary<string, string> {
                    { "Authorization", "f10e9ee8463785b1aa0f40fa64bfed336253bddf2f3b55d76cb65055e638fdc9" }
                },
                ApiKeyPrefix = new Dictionary<string, string> {
                    { "Authorization", "ApiKey-v1" }
                }
            };
            instance = new IntegrationApi(integrationConfig);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IntegrationApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' IntegrationApi
            //Assert.IsInstanceOf(typeof(IntegrationApi), instance);
        }

        
        /// <summary>
        /// Test CreateCouponReservation
        /// </summary>
        [Test]
        public void CreateCouponReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //CouponReservations couponReservations = null;
            //var response = instance.CreateCouponReservation(couponValue, couponReservations);
            //Assert.IsInstanceOf(typeof(Coupon), response, "response is Coupon");
        }
        
        /// <summary>
        /// Test CreateReferral
        /// </summary>
        [Test]
        public void CreateReferralTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewReferral newReferral = null;
            //var response = instance.CreateReferral(newReferral);
            //Assert.IsInstanceOf(typeof(Referral), response, "response is Referral");
        }
        
        /// <summary>
        /// Test CreateReferralsForMultipleAdvocates
        /// </summary>
        [Test]
        public void CreateReferralsForMultipleAdvocatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewReferralsForMultipleAdvocates newReferralsForMultipleAdvocates = null;
            //string silent = null;
            //var response = instance.CreateReferralsForMultipleAdvocates(newReferralsForMultipleAdvocates, silent);
            //Assert.IsInstanceOf(typeof(InlineResponse201), response, "response is InlineResponse201");
        }
        
        /// <summary>
        /// Test DeleteCouponReservation
        /// </summary>
        [Test]
        public void DeleteCouponReservationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //CouponReservations couponReservations = null;
            //instance.DeleteCouponReservation(couponValue, couponReservations);
            
        }
        
        /// <summary>
        /// Test DeleteCustomerData
        /// </summary>
        [Test]
        public void DeleteCustomerDataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string integrationId = null;
            //instance.DeleteCustomerData(integrationId);
            
        }
        
        /// <summary>
        /// Test GetCustomerInventory
        /// </summary>
        [Test]
        public void GetCustomerInventoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string integrationId = "PROFILE_ID";
            bool? profile = true;
            bool? referrals = true;
            bool? coupons = null;
            bool? loyalty = true;
            var response = instance.GetCustomerInventory(integrationId, profile, referrals, coupons, loyalty);
            Assert.IsInstanceOf(typeof(CustomerInventory), response, "response is CustomerInventory");
            Console.WriteLine(response);
        }
        
        /// <summary>
        /// Test GetReservedCustomers
        /// </summary>
        [Test]
        public void GetReservedCustomersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string couponValue = null;
            //var response = instance.GetReservedCustomers(couponValue);
            //Assert.IsInstanceOf(typeof(InlineResponse200), response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test TrackEvent
        /// </summary>
        [Test]
        public void TrackEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NewEvent newEvent = null;
            //bool? dry = null;
            //var response = instance.TrackEvent(newEvent, dry);
            //Assert.IsInstanceOf(typeof(IntegrationState), response, "response is IntegrationState");
        }
        
        /// <summary>
        /// Test UpdateCustomerProfile
        /// </summary>
        [Test]
        public void UpdateCustomerProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string integrationId = "PROFILE_ID";
            NewCustomerProfile newCustomerProfile = new NewCustomerProfile {
                Attributes = new Dictionary<string, Object> {
                    { "Name", "I'm new Here" },
                    { "Email", "new@there.com" }
                }
            };
            bool? dry = null;
            var response = instance.UpdateCustomerProfile(integrationId, newCustomerProfile, dry);
            Assert.IsInstanceOf(typeof(IntegrationState), response, "response is IntegrationState");
            Console.WriteLine(response);
        }

        /// <summary>
        /// Test UpdateCustomerProfileAudiences
        /// </summary>
        [Test]
        public void UpdateCustomerProfileAudiencesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CustomerProfileAudienceRequest customerProfileAudienceRequest = null;
            //instance.UpdateCustomerProfileAudiences(customerProfileAudienceRequest);
            
        }
        
        /// <summary>
        /// Test UpdateCustomerProfileV2
        /// </summary>
        [Test]
        public void UpdateCustomerProfileV2Test()
        {
            string integrationId = "test_dry_rule_engine";
            CustomerProfileIntegrationRequestV2 body = new CustomerProfileIntegrationRequestV2{
                Attributes = new Dictionary<string, Object> {
                    { "Name", "Well, Done." },
                    { "Email", "well@done.com" }
                },
                ResponseContent = new List<CustomerProfileIntegrationRequestV2.ResponseContentEnum> {
                    CustomerProfileIntegrationRequestV2.ResponseContentEnum.CustomerProfile,
                    CustomerProfileIntegrationRequestV2.ResponseContentEnum.Loyalty
                }
            };
            bool? runRuleEngine = true;
            bool? dry = null;
            var response = instance.UpdateCustomerProfileV2(integrationId, body, runRuleEngine, dry);
            Assert.IsInstanceOf(typeof(IntegrationStateV2), response, "response is IntegrationStateV2");
            Console.WriteLine(response);
        }
        
        /// <summary>
        /// Test UpdateCustomerProfilesV2
        /// </summary>
        [Test]
        public void UpdateCustomerProfilesV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultipleCustomerProfileIntegrationRequest multipleCustomerProfileIntegrationRequest = null;
            //string silent = null;
            //var response = instance.UpdateCustomerProfilesV2(multipleCustomerProfileIntegrationRequest, silent);
            //Assert.IsInstanceOf(typeof(MultipleCustomerProfileIntegrationResponseV2), response, "response is MultipleCustomerProfileIntegrationResponseV2");
        }
        
        /// <summary>
        /// Test UpdateCustomerSession
        /// </summary>
        [Test]
        public void UpdateCustomerSessionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string customerSessionId = "Wow-No-Cow";
            var body = new NewCustomerSession {
                ProfileId = "DADBOOF",
                Coupon = "TPWC8CADJN",
                State = NewCustomerSession.StateEnum.Open, // `Open` would be the default value anyway
                Total = (decimal)42.567
            };
            bool? dry = null;
            var response = instance.UpdateCustomerSession(customerSessionId, body, dry);
            Assert.IsInstanceOf<IntegrationState> (response, "response is IntegrationState");
            Console.WriteLine(response);
        }
        
        /// <summary>
        /// Test UpdateCustomerSessionV2
        /// </summary>
        [Test]
        public void UpdateCustomerSessionV2Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string customerSessionId = "Like-Milk-but-for-Humans";

            NewCustomerSessionV2 customerSession = new NewCustomerSessionV2 {
                ProfileId = "PROFILE_ID",
                CouponCodes = new List<string> {
                    "Cool-Stuff-2020"
                },
                CartItems = new List<CartItem> {
                    new CartItem(
                        "Hummus Tahini", // Name
                        "hum-t", // Sku
                        1, // Quantity
                        (decimal)5.5, // Price
                        "Food" // Category
                    ),
                    new CartItem(
                        "Iced Mint Lemonade", // Name
                        "ice-mn-lemon", // Sku
                        1, // Quantity
                        (decimal)3.5, // Price
                        "Beverages" // Category
                    )
                }
            };

            IntegrationRequest body = new IntegrationRequest(
                customerSession,
                new List<IntegrationRequest.ResponseContentEnum> {
                    IntegrationRequest.ResponseContentEnum.CustomerSession,
                    IntegrationRequest.ResponseContentEnum.CustomerProfile
                }
            );
            var response = instance.UpdateCustomerSessionV2(customerSessionId, body);
            Assert.IsInstanceOf(typeof(IntegrationStateV2), response, "response is IntegrationStateV2");
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject( response, Newtonsoft.Json.Formatting.Indented ));
            
            // Parsing the returned effects list, please consult https://developers.talon.one/Integration-API/handling-effects-v2 for the full list of effects and their corresponding properties
            foreach (Effect effect in response.Effects) {
                switch(effect.EffectType) {
                    case "setDiscount":
                        // Initiating right props instance according to the effect type
                        SetDiscountEffectProps setDiscountEffectProps = (SetDiscountEffectProps) Newtonsoft.Json.JsonConvert.DeserializeObject(effect.Props.ToString(), typeof(SetDiscountEffectProps));
                        Assert.IsInstanceOf(typeof(SetDiscountEffectProps), setDiscountEffectProps, "setDiscountEffectProps is SetDiscountEffectProps");

                        // Access the specific effect's properties
                        Console.WriteLine("Set a discount '{0}' of {1:00.000}", setDiscountEffectProps.Name, setDiscountEffectProps.Value);
                        break;
                    case "rejectCoupon":
                        // Initiating right props instance according to the effect type
                        RejectCouponEffectProps rejectCouponEffectProps = (RejectCouponEffectProps) Newtonsoft.Json.JsonConvert.DeserializeObject(effect.Props.ToString(), typeof(RejectCouponEffectProps));
                        Assert.IsInstanceOf(typeof(RejectCouponEffectProps), rejectCouponEffectProps, "rejectCouponEffectProps is RejectCouponEffectProps");

                        // Access the specific effect's properties
                        Console.WriteLine("REJECTED: {0}", rejectCouponEffectProps.Value);
                        break;
                    // case "acceptCoupon":
                    // Work with AcceptCouponEffectProps' properties
                    // ...
                    default:
                        Console.WriteLine("Encounter unknown effect type: {0}", effect.EffectType);
                        break;
                }
            }
        }
        
    }

}
