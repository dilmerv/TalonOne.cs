/* 
 * Talon.One API
 *
 * The Talon.One API is used to manage applications and campaigns, as well as to integrate with your application. The operations in the _Integration API_ section are used to integrate with our platform, while the other operations are used to manage applications and campaigns.  ### Where is the API?  The API is available at the same hostname as these docs. For example, if you are reading this page at `https://mycompany.talon.one/docs/api/`, the URL for the [updateCustomerProfile][] operation is `https://mycompany.talon.one/v1/customer_profiles/id`  [updateCustomerProfile]: #operation- -v1-customer_profiles- -integrationId- -put 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using TalonOne.Client;
using TalonOne.Model;
using Attribute = TalonOne.Model.Attribute;

namespace TalonOne.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add points in a loyalty program for the specified customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns></returns>
        void AddLoyaltyPoints (int programID, string integrationID, LoyaltyPoints loyaltyPoints);

        /// <summary>
        /// Add points in a loyalty program for the specified customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddLoyaltyPointsWithHttpInfo (int programID, string integrationID, LoyaltyPoints loyaltyPoints);
        /// <summary>
        /// Copy the campaign into every specified application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into every specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="campaignCopy"></param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 CopyCampaignToApplications (int applicationId, int campaignId, CampaignCopy campaignCopy);

        /// <summary>
        /// Copy the campaign into every specified application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into every specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="campaignCopy"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> CopyCampaignToApplicationsWithHttpInfo (int applicationId, int campaignId, CampaignCopy campaignCopy);
        /// <summary>
        /// Define a new additional cost
        /// </summary>
        /// <remarks>
        /// Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAdditionalCost"></param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost CreateAdditionalCost (NewAdditionalCost newAdditionalCost);

        /// <summary>
        /// Define a new additional cost
        /// </summary>
        /// <remarks>
        /// Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAdditionalCost"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> CreateAdditionalCostWithHttpInfo (NewAdditionalCost newAdditionalCost);
        /// <summary>
        /// Define a new custom attribute
        /// </summary>
        /// <remarks>
        /// Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAttribute"></param>
        /// <returns>Attribute</returns>
        Attribute CreateAttribute (NewAttribute newAttribute);

        /// <summary>
        /// Define a new custom attribute
        /// </summary>
        /// <remarks>
        /// Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAttribute"></param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> CreateAttributeWithHttpInfo (NewAttribute newAttribute);
        /// <summary>
        /// Create campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="newCampaign"></param>
        /// <returns>Campaign</returns>
        Campaign CreateCampaign (int applicationId, NewCampaign newCampaign);

        /// <summary>
        /// Create campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="newCampaign"></param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> CreateCampaignWithHttpInfo (int applicationId, NewCampaign newCampaign);
        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCoupons"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 CreateCoupons (int applicationId, int campaignId, NewCoupons newCoupons, string silent = default(string));

        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCoupons"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> CreateCouponsWithHttpInfo (int applicationId, int campaignId, NewCoupons newCoupons, string silent = default(string));
        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to the specified pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCouponsForMultipleRecipients"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 CreateCouponsForMultipleRecipients (int applicationId, int campaignId, NewCouponsForMultipleRecipients newCouponsForMultipleRecipients, string silent = default(string));

        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to the specified pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCouponsForMultipleRecipients"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> CreateCouponsForMultipleRecipientsWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients newCouponsForMultipleRecipients, string silent = default(string));
        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Sends an email with a password recovery link to the email of an existing account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPasswordEmail"></param>
        /// <returns>NewPasswordEmail</returns>
        NewPasswordEmail CreatePasswordRecoveryEmail (NewPasswordEmail newPasswordEmail);

        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Sends an email with a password recovery link to the email of an existing account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPasswordEmail"></param>
        /// <returns>ApiResponse of NewPasswordEmail</returns>
        ApiResponse<NewPasswordEmail> CreatePasswordRecoveryEmailWithHttpInfo (NewPasswordEmail newPasswordEmail);
        /// <summary>
        /// Create ruleset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Ruleset</returns>
        Ruleset CreateRuleset (int applicationId, int campaignId, NewRuleset newRuleset);

        /// <summary>
        /// Create ruleset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        ApiResponse<Ruleset> CreateRulesetWithHttpInfo (int applicationId, int campaignId, NewRuleset newRuleset);
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the other Management API endpoints. Use the &#x60;token&#x60; property of the response as bearer token.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginParams"></param>
        /// <returns>Session</returns>
        Session CreateSession (LoginParams loginParams);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the other Management API endpoints. Use the &#x60;token&#x60; property of the response as bearer token.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginParams"></param>
        /// <returns>ApiResponse of Session</returns>
        ApiResponse<Session> CreateSessionWithHttpInfo (LoginParams loginParams);
        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns></returns>
        void DeleteCampaign (int applicationId, int campaignId);

        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCampaignWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns></returns>
        void DeleteCoupon (int applicationId, int campaignId, string couponId);

        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponWithHttpInfo (int applicationId, int campaignId, string couponId);
        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns></returns>
        void DeleteCoupons (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCouponsWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns></returns>
        void DeleteReferral (int applicationId, int campaignId, string referralId);

        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReferralWithHttpInfo (int applicationId, int campaignId, string referralId);
        /// <summary>
        /// Delete ruleset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns></returns>
        void DeleteRuleset (int applicationId, int campaignId, int rulesetId);

        /// <summary>
        /// Delete ruleset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId);
        /// <summary>
        /// Export coupons to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the coupons that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>string</returns>
        string ExportCoupons (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));

        /// <summary>
        /// Export coupons to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the coupons that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCouponsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));
        /// <summary>
        /// Export Customer Sessions to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the customer sessions that match the request.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>string</returns>
        string ExportCustomerSessions (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));

        /// <summary>
        /// Export Customer Sessions to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the customer sessions that match the request.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportCustomerSessionsWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));
        /// <summary>
        /// Export triggered Effects to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the triggered effects that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportEffects (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export triggered Effects to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the triggered effects that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportEffectsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer loyalty balance to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the balance of each customer in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>string</returns>
        string ExportLoyaltyBalance (int programID);

        /// <summary>
        /// Export customer loyalty balance to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the balance of each customer in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyBalanceWithHttpInfo (int programID);
        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with a customer&#39;s ledger log in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        string ExportLoyaltyLedger (int programID, string integrationID, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with a customer&#39;s ledger log in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ExportLoyaltyLedgerWithHttpInfo (int programID, string integrationID, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));
        /// <summary>
        /// Get access logs for application (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetAccessLogs (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get access logs for application (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetAccessLogsWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get access logs for application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 GetAccessLogsWithoutTotalCount (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get access logs for application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> GetAccessLogsWithoutTotalCountWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Account</returns>
        Account GetAccount (int accountId);

        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Account</returns>
        ApiResponse<Account> GetAccountWithHttpInfo (int accountId);
        /// <summary>
        /// Get Account Analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>AccountAnalytics</returns>
        AccountAnalytics GetAccountAnalytics (int accountId);

        /// <summary>
        /// Get Account Analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of AccountAnalytics</returns>
        ApiResponse<AccountAnalytics> GetAccountAnalyticsWithHttpInfo (int accountId);
        /// <summary>
        /// Get an additional cost
        /// </summary>
        /// <remarks>
        /// Returns additional cost for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost GetAdditionalCost (int additionalCostId);

        /// <summary>
        /// Get an additional cost
        /// </summary>
        /// <remarks>
        /// Returns additional cost for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> GetAdditionalCostWithHttpInfo (int additionalCostId);
        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GetAdditionalCosts (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GetAdditionalCostsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 GetAllAccessLogs (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> GetAllAccessLogsWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GetAllRoles ();

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GetAllRolesWithHttpInfo ();
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Application</returns>
        Application GetApplication (int applicationId);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of Application</returns>
        ApiResponse<Application> GetApplicationWithHttpInfo (int applicationId);
        /// <summary>
        /// Get report of health of application API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApplicationApiHealth</returns>
        ApplicationApiHealth GetApplicationApiHealth (int applicationId);

        /// <summary>
        /// Get report of health of application API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of ApplicationApiHealth</returns>
        ApiResponse<ApplicationApiHealth> GetApplicationApiHealthWithHttpInfo (int applicationId);
        /// <summary>
        /// Get Application Customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApplicationCustomer</returns>
        ApplicationCustomer GetApplicationCustomer (int applicationId, int customerId);

        /// <summary>
        /// Get Application Customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        ApiResponse<ApplicationCustomer> GetApplicationCustomerWithHttpInfo (int applicationId, int customerId);
        /// <summary>
        /// List Application Customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 GetApplicationCustomers (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List Application Customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> GetApplicationCustomersWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// Get a list of the customer profiles that match the given attributes (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetApplicationCustomersByAttributes (ApplicationCustomerSearch applicationCustomerSearch);

        /// <summary>
        /// Get a list of the customer profiles that match the given attributes (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetApplicationCustomersByAttributesWithHttpInfo (ApplicationCustomerSearch applicationCustomerSearch);
        /// <summary>
        /// List Applications Event Types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GetApplicationEventTypes (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications Event Types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GetApplicationEventTypesWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List Applications Events (with total count)
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GetApplicationEvents (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications Events (with total count)
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GetApplicationEventsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// List Applications Events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GetApplicationEventsWithoutTotalCount (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications Events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GetApplicationEventsWithoutTotalCountWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// Get Application Session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>ApplicationSession</returns>
        ApplicationSession GetApplicationSession (int applicationId, int sessionId);

        /// <summary>
        /// Get Application Session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>ApiResponse of ApplicationSession</returns>
        ApiResponse<ApplicationSession> GetApplicationSessionWithHttpInfo (int applicationId, int sessionId);
        /// <summary>
        /// List Application Sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GetApplicationSessions (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));

        /// <summary>
        /// List Application Sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GetApplicationSessionsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all application in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetApplications (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all application in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetApplicationsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get a custom attribute
        /// </summary>
        /// <remarks>
        /// Returns custom attribute for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Attribute</returns>
        Attribute GetAttribute (int attributeId);

        /// <summary>
        /// Get a custom attribute
        /// </summary>
        /// <remarks>
        /// Returns custom attribute for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> GetAttributeWithHttpInfo (int attributeId);
        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Returns all the defined custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="entity"> (optional)</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GetAttributes (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));

        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Returns all the defined custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="entity"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GetAttributesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));
        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get All audiences created in the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GetAudiences (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get All audiences created in the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GetAudiencesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Campaign</returns>
        Campaign GetCampaign (int applicationId, int campaignId);

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> GetCampaignWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 GetCampaignAnalytics (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));

        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> GetCampaignAnalyticsWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));
        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the campaigns that exactly match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetCampaignByAttributes (int applicationId, CampaignSearch campaignSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));

        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the campaigns that exactly match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetCampaignByAttributesWithHttpInfo (int applicationId, CampaignSearch campaignSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));
        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetCampaigns (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?));

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetCampaignsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?));
        /// <summary>
        /// Get audit log for an account
        /// </summary>
        /// <remarks>
        /// Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GetChanges (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?));

        /// <summary>
        /// Get audit log for an account
        /// </summary>
        /// <remarks>
        /// Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GetChangesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?));
        /// <summary>
        /// List coupons (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetCoupons (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// List coupons (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetCouponsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetCouponsByAttributes (int applicationId, int campaignId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetCouponsByAttributesWithHttpInfo (int applicationId, int campaignId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria Application wide 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 GetCouponsByAttributesApplicationWide (int applicationId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria Application wide 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> GetCouponsByAttributesApplicationWideWithHttpInfo (int applicationId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 GetCouponsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> GetCouponsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Get Activity Report for Single Customer
        /// </summary>
        /// <remarks>
        /// Fetch summary report for single application customer based on a time range
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>CustomerActivityReport</returns>
        CustomerActivityReport GetCustomerActivityReport (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get Activity Report for Single Customer
        /// </summary>
        /// <remarks>
        /// Fetch summary report for single application customer based on a time range
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of CustomerActivityReport</returns>
        ApiResponse<CustomerActivityReport> GetCustomerActivityReportWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Get Activity Reports for Application Customers (with total count)
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 GetCustomerActivityReports (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers (with total count)
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> GetCustomerActivityReportsWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 GetCustomerActivityReportsWithoutTotalCount (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> GetCustomerActivityReportsWithoutTotalCountWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get Analytics Report for a Customer
        /// </summary>
        /// <remarks>
        /// Fetch analytics for single application customer
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>CustomerAnalytics</returns>
        CustomerAnalytics GetCustomerAnalytics (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get Analytics Report for a Customer
        /// </summary>
        /// <remarks>
        /// Fetch analytics for single application customer
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of CustomerAnalytics</returns>
        ApiResponse<CustomerAnalytics> GetCustomerAnalyticsWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Customer Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApplicationCustomer</returns>
        ApplicationCustomer GetCustomerProfile (int customerId);

        /// <summary>
        /// Get Customer Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        ApiResponse<ApplicationCustomer> GetCustomerProfileWithHttpInfo (int customerId);
        /// <summary>
        /// List Customer Profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetCustomerProfiles (int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List Customer Profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetCustomerProfilesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List customer profiles that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GetCustomersByAttributes (ApplicationCustomerSearch applicationCustomerSearch, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List customer profiles that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GetCustomersByAttributesWithHttpInfo (ApplicationCustomerSearch applicationCustomerSearch, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GetEventTypes (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GetEventTypesWithHttpInfo (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// Get a list of all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 GetExports (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string));

        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// Get a list of all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> GetExportsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string));
        /// <summary>
        /// Get integration&#39;s Loyalty Ledger
        /// </summary>
        /// <remarks>
        /// Get the Loyalty Ledger for this profile integration ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>LoyaltyLedger</returns>
        LoyaltyLedger GetLoyaltyPoints (int programID, string integrationID);

        /// <summary>
        /// Get integration&#39;s Loyalty Ledger
        /// </summary>
        /// <remarks>
        /// Get the Loyalty Ledger for this profile integration ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>ApiResponse of LoyaltyLedger</returns>
        ApiResponse<LoyaltyLedger> GetLoyaltyPointsWithHttpInfo (int programID, string integrationID);
        /// <summary>
        /// Get a loyalty program
        /// </summary>
        /// <remarks>
        /// Get a loyalty program.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>LoyaltyProgram</returns>
        LoyaltyProgram GetLoyaltyProgram (int programID);

        /// <summary>
        /// Get a loyalty program
        /// </summary>
        /// <remarks>
        /// Get a loyalty program.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        ApiResponse<LoyaltyProgram> GetLoyaltyProgramWithHttpInfo (int programID);
        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List all the loyalty programs.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 GetLoyaltyPrograms ();

        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List all the loyalty programs.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> GetLoyaltyProgramsWithHttpInfo ();
        /// <summary>
        /// Get loyalty program statistics by loyalty program ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>LoyaltyStatistics</returns>
        LoyaltyStatistics GetLoyaltyStatistics (int programID);

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>ApiResponse of LoyaltyStatistics</returns>
        ApiResponse<LoyaltyStatistics> GetLoyaltyStatisticsWithHttpInfo (int programID);
        /// <summary>
        /// List referrals (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 GetReferrals (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> GetReferralsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 GetReferralsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> GetReferralsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// Get information for the specified role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        Role GetRole (int roleId);

        /// <summary>
        /// Get information for the specified role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> GetRoleWithHttpInfo (int roleId);
        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Ruleset</returns>
        Ruleset GetRuleset (int applicationId, int campaignId, int rulesetId);

        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        ApiResponse<Ruleset> GetRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId);
        /// <summary>
        /// List rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets in the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetRulesets (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets in the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetRulesetsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get a single User
        /// </summary>
        /// <remarks>
        /// Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        User GetUser (int userId);

        /// <summary>
        /// Get a single User
        /// </summary>
        /// <remarks>
        /// Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (int userId);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GetUsers (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GetUsersWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns an webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Webhook</returns>
        Webhook GetWebhook (int webhookId);

        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns an webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>ApiResponse of Webhook</returns>
        ApiResponse<Webhook> GetWebhookWithHttpInfo (int webhookId);
        /// <summary>
        /// List Webhook activation Log Entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GetWebhookActivationLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List Webhook activation Log Entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GetWebhookActivationLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List Webhook Log Entries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GetWebhookLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List Webhook Log Entries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GetWebhookLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GetWebhooks (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GetWebhooksWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Import coupons via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportCoupons (int applicationId, int campaignId, string upfile = default(string));

        /// <summary>
        /// Import coupons via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportCouponsWithHttpInfo (int applicationId, int campaignId, string upfile = default(string));
        /// <summary>
        /// Import loyalty points via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points that should be created. The file should be sent as multipart data.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportLoyaltyPoints (int programID, string upFile = default(string));

        /// <summary>
        /// Import loyalty points via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points that should be created. The file should be sent as multipart data.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportLoyaltyPointsWithHttpInfo (int programID, string upFile = default(string));
        /// <summary>
        /// Import giveaways codes into a giveaways pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaways codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaways attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportPoolGiveaways (int poolId, string upfile = default(string));

        /// <summary>
        /// Import giveaways codes into a giveaways pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaways codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaways attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportPoolGiveawaysWithHttpInfo (int poolId, string upfile = default(string));
        /// <summary>
        /// Import referrals via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following colums:  - &#x60;code&#x60; (required): the referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: the start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: the end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Import</returns>
        Import ImportReferrals (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import referrals via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following colums:  - &#x60;code&#x60; (required): the referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: the start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: the end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        ApiResponse<Import> ImportReferralsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// Deduct points in a loyalty program for the specified customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns></returns>
        void RemoveLoyaltyPoints (int programID, string integrationID, LoyaltyPoints loyaltyPoints);

        /// <summary>
        /// Deduct points in a loyalty program for the specified customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveLoyaltyPointsWithHttpInfo (int programID, string integrationID, LoyaltyPoints loyaltyPoints);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>NewPassword</returns>
        NewPassword ResetPassword (NewPassword newPassword);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>ApiResponse of NewPassword</returns>
        ApiResponse<NewPassword> ResetPasswordWithHttpInfo (NewPassword newPassword);
        /// <summary>
        /// List coupons that match the given attributes (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 SearchCouponsAdvanced (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> SearchCouponsAdvancedWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count)
        /// </summary>
        /// <remarks>
        /// Get a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 SearchCouponsAdvancedApplicationWide (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count)
        /// </summary>
        /// <remarks>
        /// Get a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> SearchCouponsAdvancedApplicationWideWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application
        /// </summary>
        /// <remarks>
        /// List of all the coupons with attributes matching the query criteria in all active campaigns of an application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 SearchCouponsAdvancedApplicationWideWithoutTotalCount (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application
        /// </summary>
        /// <remarks>
        /// List of all the coupons with attributes matching the query criteria in all active campaigns of an application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// List of all the coupons with attributes matching the query criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 SearchCouponsAdvancedWithoutTotalCount (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// List of all the coupons with attributes matching the query criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> SearchCouponsAdvancedWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// Update an additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="newAdditionalCost"></param>
        /// <returns>AccountAdditionalCost</returns>
        AccountAdditionalCost UpdateAdditionalCost (int additionalCostId, NewAdditionalCost newAdditionalCost);

        /// <summary>
        /// Update an additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="newAdditionalCost"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        ApiResponse<AccountAdditionalCost> UpdateAdditionalCostWithHttpInfo (int additionalCostId, NewAdditionalCost newAdditionalCost);
        /// <summary>
        /// Update a custom attribute
        /// </summary>
        /// <remarks>
        /// Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="newAttribute"></param>
        /// <returns>Attribute</returns>
        Attribute UpdateAttribute (int attributeId, NewAttribute newAttribute);

        /// <summary>
        /// Update a custom attribute
        /// </summary>
        /// <remarks>
        /// Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="newAttribute"></param>
        /// <returns>ApiResponse of Attribute</returns>
        ApiResponse<Attribute> UpdateAttributeWithHttpInfo (int attributeId, NewAttribute newAttribute);
        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign"></param>
        /// <returns>Campaign</returns>
        Campaign UpdateCampaign (int applicationId, int campaignId, UpdateCampaign updateCampaign);

        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign"></param>
        /// <returns>ApiResponse of Campaign</returns>
        ApiResponse<Campaign> UpdateCampaignWithHttpInfo (int applicationId, int campaignId, UpdateCampaign updateCampaign);
        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="updateCoupon"></param>
        /// <returns>Coupon</returns>
        Coupon UpdateCoupon (int applicationId, int campaignId, string couponId, UpdateCoupon updateCoupon);

        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="updateCoupon"></param>
        /// <returns>ApiResponse of Coupon</returns>
        ApiResponse<Coupon> UpdateCouponWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon updateCoupon);
        /// <summary>
        /// Update a batch of coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCouponBatch"></param>
        /// <returns></returns>
        void UpdateCouponBatch (int applicationId, int campaignId, UpdateCouponBatch updateCouponBatch);

        /// <summary>
        /// Update a batch of coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCouponBatch"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateCouponBatchWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch updateCouponBatch);
        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="updateReferral"></param>
        /// <returns>Referral</returns>
        Referral UpdateReferral (int applicationId, int campaignId, string referralId, UpdateReferral updateReferral);

        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="updateReferral"></param>
        /// <returns>ApiResponse of Referral</returns>
        ApiResponse<Referral> UpdateReferralWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral updateReferral);
        /// <summary>
        /// Update ruleset
        /// </summary>
        /// <remarks>
        /// Update the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Ruleset</returns>
        Ruleset UpdateRuleset (int applicationId, int campaignId, int rulesetId, NewRuleset newRuleset);

        /// <summary>
        /// Update ruleset
        /// </summary>
        /// <remarks>
        /// Update the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        ApiResponse<Ruleset> UpdateRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId, NewRuleset newRuleset);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add points in a loyalty program for the specified customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddLoyaltyPointsAsync (int programID, string integrationID, LoyaltyPoints loyaltyPoints);

        /// <summary>
        /// Add points in a loyalty program for the specified customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddLoyaltyPointsAsyncWithHttpInfo (int programID, string integrationID, LoyaltyPoints loyaltyPoints);
        /// <summary>
        /// Copy the campaign into every specified application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into every specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="campaignCopy"></param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> CopyCampaignToApplicationsAsync (int applicationId, int campaignId, CampaignCopy campaignCopy);

        /// <summary>
        /// Copy the campaign into every specified application
        /// </summary>
        /// <remarks>
        /// Copy the campaign into every specified application.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="campaignCopy"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CopyCampaignToApplicationsAsyncWithHttpInfo (int applicationId, int campaignId, CampaignCopy campaignCopy);
        /// <summary>
        /// Define a new additional cost
        /// </summary>
        /// <remarks>
        /// Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAdditionalCost"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> CreateAdditionalCostAsync (NewAdditionalCost newAdditionalCost);

        /// <summary>
        /// Define a new additional cost
        /// </summary>
        /// <remarks>
        /// Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAdditionalCost"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> CreateAdditionalCostAsyncWithHttpInfo (NewAdditionalCost newAdditionalCost);
        /// <summary>
        /// Define a new custom attribute
        /// </summary>
        /// <remarks>
        /// Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAttribute"></param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> CreateAttributeAsync (NewAttribute newAttribute);

        /// <summary>
        /// Define a new custom attribute
        /// </summary>
        /// <remarks>
        /// Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAttribute"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> CreateAttributeAsyncWithHttpInfo (NewAttribute newAttribute);
        /// <summary>
        /// Create campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="newCampaign"></param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> CreateCampaignAsync (int applicationId, NewCampaign newCampaign);

        /// <summary>
        /// Create campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="newCampaign"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> CreateCampaignAsyncWithHttpInfo (int applicationId, NewCampaign newCampaign);
        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCoupons"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> CreateCouponsAsync (int applicationId, int campaignId, NewCoupons newCoupons, string silent = default(string));

        /// <summary>
        /// Create coupons
        /// </summary>
        /// <remarks>
        /// Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCoupons"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CreateCouponsAsyncWithHttpInfo (int applicationId, int campaignId, NewCoupons newCoupons, string silent = default(string));
        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to the specified pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCouponsForMultipleRecipients"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> CreateCouponsForMultipleRecipientsAsync (int applicationId, int campaignId, NewCouponsForMultipleRecipients newCouponsForMultipleRecipients, string silent = default(string));

        /// <summary>
        /// Create coupons for multiple recipients
        /// </summary>
        /// <remarks>
        /// Create coupons according to the specified pattern for up to 1000 recipients.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCouponsForMultipleRecipients"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CreateCouponsForMultipleRecipientsAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients newCouponsForMultipleRecipients, string silent = default(string));
        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Sends an email with a password recovery link to the email of an existing account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPasswordEmail"></param>
        /// <returns>Task of NewPasswordEmail</returns>
        System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync (NewPasswordEmail newPasswordEmail);

        /// <summary>
        /// Request a password reset
        /// </summary>
        /// <remarks>
        /// Sends an email with a password recovery link to the email of an existing account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPasswordEmail"></param>
        /// <returns>Task of ApiResponse (NewPasswordEmail)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewPasswordEmail>> CreatePasswordRecoveryEmailAsyncWithHttpInfo (NewPasswordEmail newPasswordEmail);
        /// <summary>
        /// Create ruleset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Task of Ruleset</returns>
        System.Threading.Tasks.Task<Ruleset> CreateRulesetAsync (int applicationId, int campaignId, NewRuleset newRuleset);

        /// <summary>
        /// Create ruleset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ruleset>> CreateRulesetAsyncWithHttpInfo (int applicationId, int campaignId, NewRuleset newRuleset);
        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the other Management API endpoints. Use the &#x60;token&#x60; property of the response as bearer token.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginParams"></param>
        /// <returns>Task of Session</returns>
        System.Threading.Tasks.Task<Session> CreateSessionAsync (LoginParams loginParams);

        /// <summary>
        /// Create session
        /// </summary>
        /// <remarks>
        /// Create a session to use the other Management API endpoints. Use the &#x60;token&#x60; property of the response as bearer token.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginParams"></param>
        /// <returns>Task of ApiResponse (Session)</returns>
        System.Threading.Tasks.Task<ApiResponse<Session>> CreateSessionAsyncWithHttpInfo (LoginParams loginParams);
        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCampaignAsync (int applicationId, int campaignId);

        /// <summary>
        /// Delete campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCampaignAsyncWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponAsync (int applicationId, int campaignId, string couponId);

        /// <summary>
        /// Delete coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId);
        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCouponsAsync (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// Delete coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReferralAsync (int applicationId, int campaignId, string referralId);

        /// <summary>
        /// Delete referral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId);
        /// <summary>
        /// Delete ruleset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRulesetAsync (int applicationId, int campaignId, int rulesetId);

        /// <summary>
        /// Delete ruleset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId);
        /// <summary>
        /// Export coupons to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the coupons that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCouponsAsync (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));

        /// <summary>
        /// Export coupons to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the coupons that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCouponsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string));
        /// <summary>
        /// Export Customer Sessions to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the customer sessions that match the request.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportCustomerSessionsAsync (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));

        /// <summary>
        /// Export Customer Sessions to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the customer sessions that match the request.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportCustomerSessionsAsyncWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string));
        /// <summary>
        /// Export triggered Effects to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the triggered effects that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportEffectsAsync (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));

        /// <summary>
        /// Export triggered Effects to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the triggered effects that match the given attributes.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportEffectsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string));
        /// <summary>
        /// Export customer loyalty balance to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the balance of each customer in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyBalanceAsync (int programID);

        /// <summary>
        /// Export customer loyalty balance to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with the balance of each customer in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyBalanceAsyncWithHttpInfo (int programID);
        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with a customer&#39;s ledger log in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ExportLoyaltyLedgerAsync (int programID, string integrationID, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to a CSV file
        /// </summary>
        /// <remarks>
        /// Download a file with a customer&#39;s ledger log in the loyalty program
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyLedgerAsyncWithHttpInfo (int programID, string integrationID, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string));
        /// <summary>
        /// Get access logs for application (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetAccessLogsAsync (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get access logs for application (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetAccessLogsAsyncWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get access logs for application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> GetAccessLogsWithoutTotalCountAsync (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get access logs for application
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetAccessLogsWithoutTotalCountAsyncWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of Account</returns>
        System.Threading.Tasks.Task<Account> GetAccountAsync (int accountId);

        /// <summary>
        /// Get Account Details
        /// </summary>
        /// <remarks>
        /// Return the details of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (Account)</returns>
        System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountAsyncWithHttpInfo (int accountId);
        /// <summary>
        /// Get Account Analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of AccountAnalytics</returns>
        System.Threading.Tasks.Task<AccountAnalytics> GetAccountAnalyticsAsync (int accountId);

        /// <summary>
        /// Get Account Analytics
        /// </summary>
        /// <remarks>
        /// Return the analytics of your companies Talon.One account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (AccountAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAnalytics>> GetAccountAnalyticsAsyncWithHttpInfo (int accountId);
        /// <summary>
        /// Get an additional cost
        /// </summary>
        /// <remarks>
        /// Returns additional cost for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> GetAdditionalCostAsync (int additionalCostId);

        /// <summary>
        /// Get an additional cost
        /// </summary>
        /// <remarks>
        /// Returns additional cost for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> GetAdditionalCostAsyncWithHttpInfo (int additionalCostId);
        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GetAdditionalCostsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List additional costs
        /// </summary>
        /// <remarks>
        /// Returns all the defined additional costs for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetAdditionalCostsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> GetAllAccessLogsAsync (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List access logs
        /// </summary>
        /// <remarks>
        /// Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetAllAccessLogsAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GetAllRolesAsync ();

        /// <summary>
        /// List roles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetAllRolesAsyncWithHttpInfo ();
        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of Application</returns>
        System.Threading.Tasks.Task<Application> GetApplicationAsync (int applicationId);

        /// <summary>
        /// Get Application
        /// </summary>
        /// <remarks>
        /// Get the application specified by the ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (Application)</returns>
        System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (int applicationId);
        /// <summary>
        /// Get report of health of application API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApplicationApiHealth</returns>
        System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync (int applicationId);

        /// <summary>
        /// Get report of health of application API
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (ApplicationApiHealth)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationApiHealth>> GetApplicationApiHealthAsyncWithHttpInfo (int applicationId);
        /// <summary>
        /// Get Application Customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApplicationCustomer</returns>
        System.Threading.Tasks.Task<ApplicationCustomer> GetApplicationCustomerAsync (int applicationId, int customerId);

        /// <summary>
        /// Get Application Customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationCustomer>> GetApplicationCustomerAsyncWithHttpInfo (int applicationId, int customerId);
        /// <summary>
        /// List Application Customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> GetApplicationCustomersAsync (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List Application Customers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetApplicationCustomersAsyncWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// Get a list of the customer profiles that match the given attributes (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetApplicationCustomersByAttributesAsync (ApplicationCustomerSearch applicationCustomerSearch);

        /// <summary>
        /// Get a list of the customer profiles that match the given attributes (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetApplicationCustomersByAttributesAsyncWithHttpInfo (ApplicationCustomerSearch applicationCustomerSearch);
        /// <summary>
        /// List Applications Event Types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GetApplicationEventTypesAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications Event Types
        /// </summary>
        /// <remarks>
        /// Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetApplicationEventTypesAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// List Applications Events (with total count)
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GetApplicationEventsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications Events (with total count)
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetApplicationEventsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// List Applications Events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GetApplicationEventsWithoutTotalCountAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));

        /// <summary>
        /// List Applications Events
        /// </summary>
        /// <remarks>
        /// Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string));
        /// <summary>
        /// Get Application Session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>Task of ApplicationSession</returns>
        System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync (int applicationId, int sessionId);

        /// <summary>
        /// Get Application Session
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>Task of ApiResponse (ApplicationSession)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationSession>> GetApplicationSessionAsyncWithHttpInfo (int applicationId, int sessionId);
        /// <summary>
        /// List Application Sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GetApplicationSessionsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));

        /// <summary>
        /// List Application Sessions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetApplicationSessionsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string));
        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all application in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetApplicationsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List Applications
        /// </summary>
        /// <remarks>
        /// List all application in the current account.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetApplicationsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get a custom attribute
        /// </summary>
        /// <remarks>
        /// Returns custom attribute for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> GetAttributeAsync (int attributeId);

        /// <summary>
        /// Get a custom attribute
        /// </summary>
        /// <remarks>
        /// Returns custom attribute for the account by its id. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> GetAttributeAsyncWithHttpInfo (int attributeId);
        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Returns all the defined custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="entity"> (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GetAttributesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));

        /// <summary>
        /// List custom attributes
        /// </summary>
        /// <remarks>
        /// Returns all the defined custom attributes for the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="entity"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetAttributesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string));
        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get All audiences created in the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GetAudiencesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));

        /// <summary>
        /// List audiences
        /// </summary>
        /// <remarks>
        /// Get All audiences created in the account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetAudiencesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?));
        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> GetCampaignAsync (int applicationId, int campaignId);

        /// <summary>
        /// Get campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignAsyncWithHttpInfo (int applicationId, int campaignId);
        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> GetCampaignAnalyticsAsync (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));

        /// <summary>
        /// Get analytics of campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetCampaignAnalyticsAsyncWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string));
        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the campaigns that exactly match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetCampaignByAttributesAsync (int applicationId, CampaignSearch campaignSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));

        /// <summary>
        /// List campaigns that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the campaigns that exactly match a set of attributes. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetCampaignByAttributesAsyncWithHttpInfo (int applicationId, CampaignSearch campaignSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string));
        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetCampaignsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?));

        /// <summary>
        /// List campaigns
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetCampaignsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?));
        /// <summary>
        /// Get audit log for an account
        /// </summary>
        /// <remarks>
        /// Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GetChangesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?));

        /// <summary>
        /// Get audit log for an account
        /// </summary>
        /// <remarks>
        /// Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetChangesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?));
        /// <summary>
        /// List coupons (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetCouponsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// List coupons (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCouponsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetCouponsByAttributesAsync (int applicationId, int campaignId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCouponsByAttributesAsyncWithHttpInfo (int applicationId, int campaignId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria Application wide 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> GetCouponsByAttributesApplicationWideAsync (int applicationId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria Application wide 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCouponsByAttributesApplicationWideAsyncWithHttpInfo (int applicationId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> GetCouponsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));

        /// <summary>
        /// List coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetCouponsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?));
        /// <summary>
        /// Get Activity Report for Single Customer
        /// </summary>
        /// <remarks>
        /// Fetch summary report for single application customer based on a time range
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of CustomerActivityReport</returns>
        System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// Get Activity Report for Single Customer
        /// </summary>
        /// <remarks>
        /// Fetch summary report for single application customer based on a time range
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerActivityReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerActivityReport>> GetCustomerActivityReportAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Get Activity Reports for Application Customers (with total count)
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> GetCustomerActivityReportsAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers (with total count)
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetCustomerActivityReportsAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> GetCustomerActivityReportsWithoutTotalCountAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));

        /// <summary>
        /// Get Activity Reports for Application Customers
        /// </summary>
        /// <remarks>
        /// Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string));
        /// <summary>
        /// Get Analytics Report for a Customer
        /// </summary>
        /// <remarks>
        /// Fetch analytics for single application customer
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of CustomerAnalytics</returns>
        System.Threading.Tasks.Task<CustomerAnalytics> GetCustomerAnalyticsAsync (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// Get Analytics Report for a Customer
        /// </summary>
        /// <remarks>
        /// Fetch analytics for single application customer
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerAnalytics)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerAnalytics>> GetCustomerAnalyticsAsyncWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Customer Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApplicationCustomer</returns>
        System.Threading.Tasks.Task<ApplicationCustomer> GetCustomerProfileAsync (int customerId);

        /// <summary>
        /// Get Customer Profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationCustomer>> GetCustomerProfileAsyncWithHttpInfo (int customerId);
        /// <summary>
        /// List Customer Profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetCustomerProfilesAsync (int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List Customer Profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetCustomerProfilesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List customer profiles that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GetCustomersByAttributesAsync (ApplicationCustomerSearch applicationCustomerSearch, int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List customer profiles that match the given attributes
        /// </summary>
        /// <remarks>
        /// Get a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetCustomersByAttributesAsyncWithHttpInfo (ApplicationCustomerSearch applicationCustomerSearch, int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GetEventTypesAsync (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List event types
        /// </summary>
        /// <remarks>
        /// Fetch all event type definitions for your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetEventTypesAsyncWithHttpInfo (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// Get a list of all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> GetExportsAsync (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string));

        /// <summary>
        /// Get exports
        /// </summary>
        /// <remarks>
        /// Get a list of all past exports 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetExportsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string));
        /// <summary>
        /// Get integration&#39;s Loyalty Ledger
        /// </summary>
        /// <remarks>
        /// Get the Loyalty Ledger for this profile integration ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>Task of LoyaltyLedger</returns>
        System.Threading.Tasks.Task<LoyaltyLedger> GetLoyaltyPointsAsync (int programID, string integrationID);

        /// <summary>
        /// Get integration&#39;s Loyalty Ledger
        /// </summary>
        /// <remarks>
        /// Get the Loyalty Ledger for this profile integration ID.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (LoyaltyLedger)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyLedger>> GetLoyaltyPointsAsyncWithHttpInfo (int programID, string integrationID);
        /// <summary>
        /// Get a loyalty program
        /// </summary>
        /// <remarks>
        /// Get a loyalty program.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of LoyaltyProgram</returns>
        System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync (int programID);

        /// <summary>
        /// Get a loyalty program
        /// </summary>
        /// <remarks>
        /// Get a loyalty program.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> GetLoyaltyProgramAsyncWithHttpInfo (int programID);
        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List all the loyalty programs.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> GetLoyaltyProgramsAsync ();

        /// <summary>
        /// List loyalty programs
        /// </summary>
        /// <remarks>
        /// List all the loyalty programs.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetLoyaltyProgramsAsyncWithHttpInfo ();
        /// <summary>
        /// Get loyalty program statistics by loyalty program ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of LoyaltyStatistics</returns>
        System.Threading.Tasks.Task<LoyaltyStatistics> GetLoyaltyStatisticsAsync (int programID);

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (LoyaltyStatistics)</returns>
        System.Threading.Tasks.Task<ApiResponse<LoyaltyStatistics>> GetLoyaltyStatisticsAsyncWithHttpInfo (int programID);
        /// <summary>
        /// List referrals (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> GetReferralsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals (with total count)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> GetReferralsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> GetReferralsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));

        /// <summary>
        /// List referrals
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetReferralsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string));
        /// <summary>
        /// Get information for the specified role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> GetRoleAsync (int roleId);

        /// <summary>
        /// Get information for the specified role
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (int roleId);
        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of Ruleset</returns>
        System.Threading.Tasks.Task<Ruleset> GetRulesetAsync (int applicationId, int campaignId, int rulesetId);

        /// <summary>
        /// Get ruleset
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ruleset>> GetRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId);
        /// <summary>
        /// List rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets in the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetRulesetsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List rulesets
        /// </summary>
        /// <remarks>
        /// List all rulesets in the given campaign.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetRulesetsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get a single User
        /// </summary>
        /// <remarks>
        /// Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (int userId);

        /// <summary>
        /// Get a single User
        /// </summary>
        /// <remarks>
        /// Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (int userId);
        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GetUsersAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));

        /// <summary>
        /// List users
        /// </summary>
        /// <remarks>
        /// Retrieve all users in your account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetUsersAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string));
        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns an webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Task of Webhook</returns>
        System.Threading.Tasks.Task<Webhook> GetWebhookAsync (int webhookId);

        /// <summary>
        /// Get Webhook
        /// </summary>
        /// <remarks>
        /// Returns an webhook by its id.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (int webhookId);
        /// <summary>
        /// List Webhook activation Log Entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GetWebhookActivationLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List Webhook activation Log Entries
        /// </summary>
        /// <remarks>
        /// Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetWebhookActivationLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List Webhook Log Entries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GetWebhookLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));

        /// <summary>
        /// List Webhook Log Entries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetWebhookLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?));
        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GetWebhooksAsync (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));

        /// <summary>
        /// List Webhooks
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetWebhooksAsyncWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?));
        /// <summary>
        /// Import coupons via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportCouponsAsync (int applicationId, int campaignId, string upfile = default(string));

        /// <summary>
        /// Import coupons via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string upfile = default(string));
        /// <summary>
        /// Import loyalty points via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points that should be created. The file should be sent as multipart data.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportLoyaltyPointsAsync (int programID, string upFile = default(string));

        /// <summary>
        /// Import loyalty points via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the loyalty points that should be created. The file should be sent as multipart data.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportLoyaltyPointsAsyncWithHttpInfo (int programID, string upFile = default(string));
        /// <summary>
        /// Import giveaways codes into a giveaways pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaways codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaways attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportPoolGiveawaysAsync (int poolId, string upfile = default(string));

        /// <summary>
        /// Import giveaways codes into a giveaways pool
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the giveaways codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaways attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportPoolGiveawaysAsyncWithHttpInfo (int poolId, string upfile = default(string));
        /// <summary>
        /// Import referrals via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following colums:  - &#x60;code&#x60; (required): the referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: the start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: the end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        System.Threading.Tasks.Task<Import> ImportReferralsAsync (int applicationId, int campaignId, string upFile = default(string));

        /// <summary>
        /// Import referrals via CSV file
        /// </summary>
        /// <remarks>
        /// Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following colums:  - &#x60;code&#x60; (required): the referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: the start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: the end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        System.Threading.Tasks.Task<ApiResponse<Import>> ImportReferralsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string));
        /// <summary>
        /// Deduct points in a loyalty program for the specified customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveLoyaltyPointsAsync (int programID, string integrationID, LoyaltyPoints loyaltyPoints);

        /// <summary>
        /// Deduct points in a loyalty program for the specified customer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveLoyaltyPointsAsyncWithHttpInfo (int programID, string integrationID, LoyaltyPoints loyaltyPoints);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>Task of NewPassword</returns>
        System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync (NewPassword newPassword);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Consumes the supplied password reset token and updates the password for the associated account. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>Task of ApiResponse (NewPassword)</returns>
        System.Threading.Tasks.Task<ApiResponse<NewPassword>> ResetPasswordAsyncWithHttpInfo (NewPassword newPassword);
        /// <summary>
        /// List coupons that match the given attributes (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> SearchCouponsAdvancedAsync (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes (with total count)
        /// </summary>
        /// <remarks>
        /// Gets a list of all the coupons with attributes matching the query criteria 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> SearchCouponsAdvancedAsyncWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count)
        /// </summary>
        /// <remarks>
        /// Get a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> SearchCouponsAdvancedApplicationWideAsync (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count)
        /// </summary>
        /// <remarks>
        /// Get a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> SearchCouponsAdvancedApplicationWideAsyncWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application
        /// </summary>
        /// <remarks>
        /// List of all the coupons with attributes matching the query criteria in all active campaigns of an application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsync (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application
        /// </summary>
        /// <remarks>
        /// List of all the coupons with attributes matching the query criteria in all active campaigns of an application. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string));
        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// List of all the coupons with attributes matching the query criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> SearchCouponsAdvancedWithoutTotalCountAsync (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));

        /// <summary>
        /// List coupons that match the given attributes
        /// </summary>
        /// <remarks>
        /// List of all the coupons with attributes matching the query criteria. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string));
        /// <summary>
        /// Update an additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="newAdditionalCost"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        System.Threading.Tasks.Task<AccountAdditionalCost> UpdateAdditionalCostAsync (int additionalCostId, NewAdditionalCost newAdditionalCost);

        /// <summary>
        /// Update an additional cost
        /// </summary>
        /// <remarks>
        /// Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="newAdditionalCost"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> UpdateAdditionalCostAsyncWithHttpInfo (int additionalCostId, NewAdditionalCost newAdditionalCost);
        /// <summary>
        /// Update a custom attribute
        /// </summary>
        /// <remarks>
        /// Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="newAttribute"></param>
        /// <returns>Task of Attribute</returns>
        System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync (int attributeId, NewAttribute newAttribute);

        /// <summary>
        /// Update a custom attribute
        /// </summary>
        /// <remarks>
        /// Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="newAttribute"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        System.Threading.Tasks.Task<ApiResponse<Attribute>> UpdateAttributeAsyncWithHttpInfo (int attributeId, NewAttribute newAttribute);
        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign"></param>
        /// <returns>Task of Campaign</returns>
        System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync (int applicationId, int campaignId, UpdateCampaign updateCampaign);

        /// <summary>
        /// Update campaign
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        System.Threading.Tasks.Task<ApiResponse<Campaign>> UpdateCampaignAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCampaign updateCampaign);
        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="updateCoupon"></param>
        /// <returns>Task of Coupon</returns>
        System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (int applicationId, int campaignId, string couponId, UpdateCoupon updateCoupon);

        /// <summary>
        /// Update coupon
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="updateCoupon"></param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        System.Threading.Tasks.Task<ApiResponse<Coupon>> UpdateCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon updateCoupon);
        /// <summary>
        /// Update a batch of coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCouponBatch"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateCouponBatchAsync (int applicationId, int campaignId, UpdateCouponBatch updateCouponBatch);

        /// <summary>
        /// Update a batch of coupons
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCouponBatch"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCouponBatchAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch updateCouponBatch);
        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="updateReferral"></param>
        /// <returns>Task of Referral</returns>
        System.Threading.Tasks.Task<Referral> UpdateReferralAsync (int applicationId, int campaignId, string referralId, UpdateReferral updateReferral);

        /// <summary>
        /// Update referral
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="updateReferral"></param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        System.Threading.Tasks.Task<ApiResponse<Referral>> UpdateReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral updateReferral);
        /// <summary>
        /// Update ruleset
        /// </summary>
        /// <remarks>
        /// Update the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Task of Ruleset</returns>
        System.Threading.Tasks.Task<Ruleset> UpdateRulesetAsync (int applicationId, int campaignId, int rulesetId, NewRuleset newRuleset);

        /// <summary>
        /// Update ruleset
        /// </summary>
        /// <remarks>
        /// Update the specified ruleset.
        /// </remarks>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<Ruleset>> UpdateRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId, NewRuleset newRuleset);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManagementApi : IManagementApi
    {
        private TalonOne.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementApi(String basePath)
        {
            this.Configuration = new TalonOne.Client.Configuration { BasePath = basePath };

            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// </summary>
        /// <returns></returns>
        public ManagementApi()
        {
            this.Configuration = TalonOne.Client.Configuration.Default;

            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManagementApi(TalonOne.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = TalonOne.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = TalonOne.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public TalonOne.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public TalonOne.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add points in a loyalty program for the specified customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns></returns>
        public void AddLoyaltyPoints (int programID, string integrationID, LoyaltyPoints loyaltyPoints)
        {
             AddLoyaltyPointsWithHttpInfo(programID, integrationID, loyaltyPoints);
        }

        /// <summary>
        /// Add points in a loyalty program for the specified customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AddLoyaltyPointsWithHttpInfo (int programID, string integrationID, LoyaltyPoints loyaltyPoints)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->AddLoyaltyPoints");
            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->AddLoyaltyPoints");
            // verify the required parameter 'loyaltyPoints' is set
            if (loyaltyPoints == null)
                throw new ApiException(400, "Missing required parameter 'loyaltyPoints' when calling ManagementApi->AddLoyaltyPoints");

            var localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}/add_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (integrationID != null) localVarPathParams.Add("integrationID", this.Configuration.ApiClient.ParameterToString(integrationID)); // path parameter
            if (loyaltyPoints != null && loyaltyPoints.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loyaltyPoints); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loyaltyPoints; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Add points in a loyalty program for the specified customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddLoyaltyPointsAsync (int programID, string integrationID, LoyaltyPoints loyaltyPoints)
        {
             await AddLoyaltyPointsAsyncWithHttpInfo(programID, integrationID, loyaltyPoints);

        }

        /// <summary>
        /// Add points in a loyalty program for the specified customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddLoyaltyPointsAsyncWithHttpInfo (int programID, string integrationID, LoyaltyPoints loyaltyPoints)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->AddLoyaltyPoints");
            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->AddLoyaltyPoints");
            // verify the required parameter 'loyaltyPoints' is set
            if (loyaltyPoints == null)
                throw new ApiException(400, "Missing required parameter 'loyaltyPoints' when calling ManagementApi->AddLoyaltyPoints");

            var localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}/add_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (integrationID != null) localVarPathParams.Add("integrationID", this.Configuration.ApiClient.ParameterToString(integrationID)); // path parameter
            if (loyaltyPoints != null && loyaltyPoints.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loyaltyPoints); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loyaltyPoints; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Copy the campaign into every specified application Copy the campaign into every specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="campaignCopy"></param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 CopyCampaignToApplications (int applicationId, int campaignId, CampaignCopy campaignCopy)
        {
             ApiResponse<InlineResponse2002> localVarResponse = CopyCampaignToApplicationsWithHttpInfo(applicationId, campaignId, campaignCopy);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copy the campaign into every specified application Copy the campaign into every specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="campaignCopy"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> CopyCampaignToApplicationsWithHttpInfo (int applicationId, int campaignId, CampaignCopy campaignCopy)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CopyCampaignToApplications");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->CopyCampaignToApplications");
            // verify the required parameter 'campaignCopy' is set
            if (campaignCopy == null)
                throw new ApiException(400, "Missing required parameter 'campaignCopy' when calling ManagementApi->CopyCampaignToApplications");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (campaignCopy != null && campaignCopy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignCopy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignCopy; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyCampaignToApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Copy the campaign into every specified application Copy the campaign into every specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="campaignCopy"></param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> CopyCampaignToApplicationsAsync (int applicationId, int campaignId, CampaignCopy campaignCopy)
        {
             ApiResponse<InlineResponse2002> localVarResponse = await CopyCampaignToApplicationsAsyncWithHttpInfo(applicationId, campaignId, campaignCopy);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copy the campaign into every specified application Copy the campaign into every specified application.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="campaignCopy"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CopyCampaignToApplicationsAsyncWithHttpInfo (int applicationId, int campaignId, CampaignCopy campaignCopy)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CopyCampaignToApplications");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->CopyCampaignToApplications");
            // verify the required parameter 'campaignCopy' is set
            if (campaignCopy == null)
                throw new ApiException(400, "Missing required parameter 'campaignCopy' when calling ManagementApi->CopyCampaignToApplications");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (campaignCopy != null && campaignCopy.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignCopy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignCopy; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CopyCampaignToApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Define a new additional cost Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAdditionalCost"></param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost CreateAdditionalCost (NewAdditionalCost newAdditionalCost)
        {
             ApiResponse<AccountAdditionalCost> localVarResponse = CreateAdditionalCostWithHttpInfo(newAdditionalCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Define a new additional cost Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAdditionalCost"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public ApiResponse<AccountAdditionalCost> CreateAdditionalCostWithHttpInfo (NewAdditionalCost newAdditionalCost)
        {
            // verify the required parameter 'newAdditionalCost' is set
            if (newAdditionalCost == null)
                throw new ApiException(400, "Missing required parameter 'newAdditionalCost' when calling ManagementApi->CreateAdditionalCost");

            var localVarPath = "/v1/additional_costs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newAdditionalCost != null && newAdditionalCost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newAdditionalCost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newAdditionalCost; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAdditionalCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAdditionalCost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountAdditionalCost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAdditionalCost)));
        }

        /// <summary>
        /// Define a new additional cost Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAdditionalCost"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> CreateAdditionalCostAsync (NewAdditionalCost newAdditionalCost)
        {
             ApiResponse<AccountAdditionalCost> localVarResponse = await CreateAdditionalCostAsyncWithHttpInfo(newAdditionalCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Define a new additional cost Defines a new _additional cost_ in this account.  These additional costs are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAdditionalCost"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> CreateAdditionalCostAsyncWithHttpInfo (NewAdditionalCost newAdditionalCost)
        {
            // verify the required parameter 'newAdditionalCost' is set
            if (newAdditionalCost == null)
                throw new ApiException(400, "Missing required parameter 'newAdditionalCost' when calling ManagementApi->CreateAdditionalCost");

            var localVarPath = "/v1/additional_costs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newAdditionalCost != null && newAdditionalCost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newAdditionalCost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newAdditionalCost; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAdditionalCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAdditionalCost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountAdditionalCost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAdditionalCost)));
        }

        /// <summary>
        /// Define a new custom attribute Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAttribute"></param>
        /// <returns>Attribute</returns>
        public Attribute CreateAttribute (NewAttribute newAttribute)
        {
             ApiResponse<Attribute> localVarResponse = CreateAttributeWithHttpInfo(newAttribute);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Define a new custom attribute Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAttribute"></param>
        /// <returns>ApiResponse of Attribute</returns>
        public ApiResponse<Attribute> CreateAttributeWithHttpInfo (NewAttribute newAttribute)
        {
            // verify the required parameter 'newAttribute' is set
            if (newAttribute == null)
                throw new ApiException(400, "Missing required parameter 'newAttribute' when calling ManagementApi->CreateAttribute");

            var localVarPath = "/v1/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newAttribute != null && newAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newAttribute; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Attribute) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attribute)));
        }

        /// <summary>
        /// Define a new custom attribute Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAttribute"></param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> CreateAttributeAsync (NewAttribute newAttribute)
        {
             ApiResponse<Attribute> localVarResponse = await CreateAttributeAsyncWithHttpInfo(newAttribute);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Define a new custom attribute Defines a new _custom attribute_ in this account. Custom attributes allow you to attach new fields to Talon.One domain objects like campaigns, coupons, customers and so on. These attributes can then be given values when creating / updating these objects, and these values can be used in your campaign rules. For example, you could define a &#x60;zipCode&#x60; field for customer sessions, and add a rule to your campaign that only allows certain ZIP codes.  These attributes are shared across all applications in your account, and are never required. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newAttribute"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Attribute>> CreateAttributeAsyncWithHttpInfo (NewAttribute newAttribute)
        {
            // verify the required parameter 'newAttribute' is set
            if (newAttribute == null)
                throw new ApiException(400, "Missing required parameter 'newAttribute' when calling ManagementApi->CreateAttribute");

            var localVarPath = "/v1/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newAttribute != null && newAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newAttribute; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Attribute) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attribute)));
        }

        /// <summary>
        /// Create campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="newCampaign"></param>
        /// <returns>Campaign</returns>
        public Campaign CreateCampaign (int applicationId, NewCampaign newCampaign)
        {
             ApiResponse<Campaign> localVarResponse = CreateCampaignWithHttpInfo(applicationId, newCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="newCampaign"></param>
        /// <returns>ApiResponse of Campaign</returns>
        public ApiResponse<Campaign> CreateCampaignWithHttpInfo (int applicationId, NewCampaign newCampaign)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CreateCampaign");
            // verify the required parameter 'newCampaign' is set
            if (newCampaign == null)
                throw new ApiException(400, "Missing required parameter 'newCampaign' when calling ManagementApi->CreateCampaign");

            var localVarPath = "/v1/applications/{applicationId}/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (newCampaign != null && newCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newCampaign; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// Create campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="newCampaign"></param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> CreateCampaignAsync (int applicationId, NewCampaign newCampaign)
        {
             ApiResponse<Campaign> localVarResponse = await CreateCampaignAsyncWithHttpInfo(applicationId, newCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="newCampaign"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Campaign>> CreateCampaignAsyncWithHttpInfo (int applicationId, NewCampaign newCampaign)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CreateCampaign");
            // verify the required parameter 'newCampaign' is set
            if (newCampaign == null)
                throw new ApiException(400, "Missing required parameter 'newCampaign' when calling ManagementApi->CreateCampaign");

            var localVarPath = "/v1/applications/{applicationId}/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (newCampaign != null && newCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newCampaign; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCoupons"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 CreateCoupons (int applicationId, int campaignId, NewCoupons newCoupons, string silent = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = CreateCouponsWithHttpInfo(applicationId, campaignId, newCoupons, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCoupons"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> CreateCouponsWithHttpInfo (int applicationId, int campaignId, NewCoupons newCoupons, string silent = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CreateCoupons");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->CreateCoupons");
            // verify the required parameter 'newCoupons' is set
            if (newCoupons == null)
                throw new ApiException(400, "Missing required parameter 'newCoupons' when calling ManagementApi->CreateCoupons");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (silent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "silent", silent)); // query parameter
            if (newCoupons != null && newCoupons.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newCoupons); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newCoupons; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCoupons"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> CreateCouponsAsync (int applicationId, int campaignId, NewCoupons newCoupons, string silent = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = await CreateCouponsAsyncWithHttpInfo(applicationId, campaignId, newCoupons, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons Create coupons according to some pattern. Up to 20.000 coupons can be created without a unique prefix. When a unique prefix is provided, up to 200.000 coupons can be created.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCoupons"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CreateCouponsAsyncWithHttpInfo (int applicationId, int campaignId, NewCoupons newCoupons, string silent = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CreateCoupons");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->CreateCoupons");
            // verify the required parameter 'newCoupons' is set
            if (newCoupons == null)
                throw new ApiException(400, "Missing required parameter 'newCoupons' when calling ManagementApi->CreateCoupons");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (silent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "silent", silent)); // query parameter
            if (newCoupons != null && newCoupons.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newCoupons); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newCoupons; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to the specified pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCouponsForMultipleRecipients"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 CreateCouponsForMultipleRecipients (int applicationId, int campaignId, NewCouponsForMultipleRecipients newCouponsForMultipleRecipients, string silent = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = CreateCouponsForMultipleRecipientsWithHttpInfo(applicationId, campaignId, newCouponsForMultipleRecipients, silent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to the specified pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCouponsForMultipleRecipients"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> CreateCouponsForMultipleRecipientsWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients newCouponsForMultipleRecipients, string silent = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CreateCouponsForMultipleRecipients");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->CreateCouponsForMultipleRecipients");
            // verify the required parameter 'newCouponsForMultipleRecipients' is set
            if (newCouponsForMultipleRecipients == null)
                throw new ApiException(400, "Missing required parameter 'newCouponsForMultipleRecipients' when calling ManagementApi->CreateCouponsForMultipleRecipients");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (silent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "silent", silent)); // query parameter
            if (newCouponsForMultipleRecipients != null && newCouponsForMultipleRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newCouponsForMultipleRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newCouponsForMultipleRecipients; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCouponsForMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to the specified pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCouponsForMultipleRecipients"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> CreateCouponsForMultipleRecipientsAsync (int applicationId, int campaignId, NewCouponsForMultipleRecipients newCouponsForMultipleRecipients, string silent = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = await CreateCouponsForMultipleRecipientsAsyncWithHttpInfo(applicationId, campaignId, newCouponsForMultipleRecipients, silent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create coupons for multiple recipients Create coupons according to the specified pattern for up to 1000 recipients.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newCouponsForMultipleRecipients"></param>
        /// <param name="silent">If set to &#x60;yes&#x60;, response will be an empty 204, otherwise a list of integration states will be generated (up to 1000). (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> CreateCouponsForMultipleRecipientsAsyncWithHttpInfo (int applicationId, int campaignId, NewCouponsForMultipleRecipients newCouponsForMultipleRecipients, string silent = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CreateCouponsForMultipleRecipients");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->CreateCouponsForMultipleRecipients");
            // verify the required parameter 'newCouponsForMultipleRecipients' is set
            if (newCouponsForMultipleRecipients == null)
                throw new ApiException(400, "Missing required parameter 'newCouponsForMultipleRecipients' when calling ManagementApi->CreateCouponsForMultipleRecipients");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_with_recipients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (silent != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "silent", silent)); // query parameter
            if (newCouponsForMultipleRecipients != null && newCouponsForMultipleRecipients.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newCouponsForMultipleRecipients); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newCouponsForMultipleRecipients; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCouponsForMultipleRecipients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// Request a password reset Sends an email with a password recovery link to the email of an existing account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPasswordEmail"></param>
        /// <returns>NewPasswordEmail</returns>
        public NewPasswordEmail CreatePasswordRecoveryEmail (NewPasswordEmail newPasswordEmail)
        {
             ApiResponse<NewPasswordEmail> localVarResponse = CreatePasswordRecoveryEmailWithHttpInfo(newPasswordEmail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request a password reset Sends an email with a password recovery link to the email of an existing account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPasswordEmail"></param>
        /// <returns>ApiResponse of NewPasswordEmail</returns>
        public ApiResponse<NewPasswordEmail> CreatePasswordRecoveryEmailWithHttpInfo (NewPasswordEmail newPasswordEmail)
        {
            // verify the required parameter 'newPasswordEmail' is set
            if (newPasswordEmail == null)
                throw new ApiException(400, "Missing required parameter 'newPasswordEmail' when calling ManagementApi->CreatePasswordRecoveryEmail");

            var localVarPath = "/v1/password_recovery_emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newPasswordEmail != null && newPasswordEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newPasswordEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newPasswordEmail; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePasswordRecoveryEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewPasswordEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NewPasswordEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewPasswordEmail)));
        }

        /// <summary>
        /// Request a password reset Sends an email with a password recovery link to the email of an existing account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPasswordEmail"></param>
        /// <returns>Task of NewPasswordEmail</returns>
        public async System.Threading.Tasks.Task<NewPasswordEmail> CreatePasswordRecoveryEmailAsync (NewPasswordEmail newPasswordEmail)
        {
             ApiResponse<NewPasswordEmail> localVarResponse = await CreatePasswordRecoveryEmailAsyncWithHttpInfo(newPasswordEmail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request a password reset Sends an email with a password recovery link to the email of an existing account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPasswordEmail"></param>
        /// <returns>Task of ApiResponse (NewPasswordEmail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewPasswordEmail>> CreatePasswordRecoveryEmailAsyncWithHttpInfo (NewPasswordEmail newPasswordEmail)
        {
            // verify the required parameter 'newPasswordEmail' is set
            if (newPasswordEmail == null)
                throw new ApiException(400, "Missing required parameter 'newPasswordEmail' when calling ManagementApi->CreatePasswordRecoveryEmail");

            var localVarPath = "/v1/password_recovery_emails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newPasswordEmail != null && newPasswordEmail.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newPasswordEmail); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newPasswordEmail; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePasswordRecoveryEmail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewPasswordEmail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NewPasswordEmail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewPasswordEmail)));
        }

        /// <summary>
        /// Create ruleset 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Ruleset</returns>
        public Ruleset CreateRuleset (int applicationId, int campaignId, NewRuleset newRuleset)
        {
             ApiResponse<Ruleset> localVarResponse = CreateRulesetWithHttpInfo(applicationId, campaignId, newRuleset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create ruleset 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        public ApiResponse<Ruleset> CreateRulesetWithHttpInfo (int applicationId, int campaignId, NewRuleset newRuleset)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CreateRuleset");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->CreateRuleset");
            // verify the required parameter 'newRuleset' is set
            if (newRuleset == null)
                throw new ApiException(400, "Missing required parameter 'newRuleset' when calling ManagementApi->CreateRuleset");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (newRuleset != null && newRuleset.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newRuleset); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newRuleset; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRuleset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ruleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Ruleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ruleset)));
        }

        /// <summary>
        /// Create ruleset 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Task of Ruleset</returns>
        public async System.Threading.Tasks.Task<Ruleset> CreateRulesetAsync (int applicationId, int campaignId, NewRuleset newRuleset)
        {
             ApiResponse<Ruleset> localVarResponse = await CreateRulesetAsyncWithHttpInfo(applicationId, campaignId, newRuleset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create ruleset 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ruleset>> CreateRulesetAsyncWithHttpInfo (int applicationId, int campaignId, NewRuleset newRuleset)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->CreateRuleset");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->CreateRuleset");
            // verify the required parameter 'newRuleset' is set
            if (newRuleset == null)
                throw new ApiException(400, "Missing required parameter 'newRuleset' when calling ManagementApi->CreateRuleset");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (newRuleset != null && newRuleset.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newRuleset); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newRuleset; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRuleset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ruleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Ruleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ruleset)));
        }

        /// <summary>
        /// Create session Create a session to use the other Management API endpoints. Use the &#x60;token&#x60; property of the response as bearer token.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginParams"></param>
        /// <returns>Session</returns>
        public Session CreateSession (LoginParams loginParams)
        {
             ApiResponse<Session> localVarResponse = CreateSessionWithHttpInfo(loginParams);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create session Create a session to use the other Management API endpoints. Use the &#x60;token&#x60; property of the response as bearer token.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginParams"></param>
        /// <returns>ApiResponse of Session</returns>
        public ApiResponse<Session> CreateSessionWithHttpInfo (LoginParams loginParams)
        {
            // verify the required parameter 'loginParams' is set
            if (loginParams == null)
                throw new ApiException(400, "Missing required parameter 'loginParams' when calling ManagementApi->CreateSession");

            var localVarPath = "/v1/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginParams != null && loginParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loginParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginParams; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Session>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Session) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Session)));
        }

        /// <summary>
        /// Create session Create a session to use the other Management API endpoints. Use the &#x60;token&#x60; property of the response as bearer token.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginParams"></param>
        /// <returns>Task of Session</returns>
        public async System.Threading.Tasks.Task<Session> CreateSessionAsync (LoginParams loginParams)
        {
             ApiResponse<Session> localVarResponse = await CreateSessionAsyncWithHttpInfo(loginParams);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create session Create a session to use the other Management API endpoints. Use the &#x60;token&#x60; property of the response as bearer token.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginParams"></param>
        /// <returns>Task of ApiResponse (Session)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Session>> CreateSessionAsyncWithHttpInfo (LoginParams loginParams)
        {
            // verify the required parameter 'loginParams' is set
            if (loginParams == null)
                throw new ApiException(400, "Missing required parameter 'loginParams' when calling ManagementApi->CreateSession");

            var localVarPath = "/v1/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginParams != null && loginParams.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loginParams); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loginParams; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Session>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Session) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Session)));
        }

        /// <summary>
        /// Delete campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns></returns>
        public void DeleteCampaign (int applicationId, int campaignId)
        {
             DeleteCampaignWithHttpInfo(applicationId, campaignId);
        }

        /// <summary>
        /// Delete campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCampaignWithHttpInfo (int applicationId, int campaignId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteCampaign");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCampaignAsync (int applicationId, int campaignId)
        {
             await DeleteCampaignAsyncWithHttpInfo(applicationId, campaignId);

        }

        /// <summary>
        /// Delete campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCampaignAsyncWithHttpInfo (int applicationId, int campaignId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteCampaign");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete coupon 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns></returns>
        public void DeleteCoupon (int applicationId, int campaignId, string couponId)
        {
             DeleteCouponWithHttpInfo(applicationId, campaignId, couponId);
        }

        /// <summary>
        /// Delete coupon 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCouponWithHttpInfo (int applicationId, int campaignId, string couponId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteCoupon");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteCoupon");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->DeleteCoupon");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (couponId != null) localVarPathParams.Add("couponId", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete coupon 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponAsync (int applicationId, int campaignId, string couponId)
        {
             await DeleteCouponAsyncWithHttpInfo(applicationId, campaignId, couponId);

        }

        /// <summary>
        /// Delete coupon 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteCoupon");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteCoupon");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->DeleteCoupon");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (couponId != null) localVarPathParams.Add("couponId", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns></returns>
        public void DeleteCoupons (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             DeleteCouponsWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
        }

        /// <summary>
        /// Delete coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteCouponsWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteCoupons");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteCoupons");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (startsAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsAfter", startsAfter)); // query parameter
            if (startsBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsBefore", startsBefore)); // query parameter
            if (expiresAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresAfter", expiresAfter)); // query parameter
            if (expiresBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresBefore", expiresBefore)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCouponsAsync (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             await DeleteCouponsAsyncWithHttpInfo(applicationId, campaignId, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);

        }

        /// <summary>
        /// Delete coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteCoupons");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteCoupons");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (startsAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsAfter", startsAfter)); // query parameter
            if (startsBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsBefore", startsBefore)); // query parameter
            if (expiresAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresAfter", expiresAfter)); // query parameter
            if (expiresBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresBefore", expiresBefore)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete referral 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns></returns>
        public void DeleteReferral (int applicationId, int campaignId, string referralId)
        {
             DeleteReferralWithHttpInfo(applicationId, campaignId, referralId);
        }

        /// <summary>
        /// Delete referral 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReferralWithHttpInfo (int applicationId, int campaignId, string referralId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteReferral");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteReferral");
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->DeleteReferral");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (referralId != null) localVarPathParams.Add("referralId", this.Configuration.ApiClient.ParameterToString(referralId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReferral", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete referral 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReferralAsync (int applicationId, int campaignId, string referralId)
        {
             await DeleteReferralAsyncWithHttpInfo(applicationId, campaignId, referralId);

        }

        /// <summary>
        /// Delete referral 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteReferral");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteReferral");
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->DeleteReferral");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (referralId != null) localVarPathParams.Add("referralId", this.Configuration.ApiClient.ParameterToString(referralId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReferral", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete ruleset 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns></returns>
        public void DeleteRuleset (int applicationId, int campaignId, int rulesetId)
        {
             DeleteRulesetWithHttpInfo(applicationId, campaignId, rulesetId);
        }

        /// <summary>
        /// Delete ruleset 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteRuleset");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteRuleset");
            // verify the required parameter 'rulesetId' is set
            if (rulesetId == null)
                throw new ApiException(400, "Missing required parameter 'rulesetId' when calling ManagementApi->DeleteRuleset");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (rulesetId != null) localVarPathParams.Add("rulesetId", this.Configuration.ApiClient.ParameterToString(rulesetId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRuleset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete ruleset 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRulesetAsync (int applicationId, int campaignId, int rulesetId)
        {
             await DeleteRulesetAsyncWithHttpInfo(applicationId, campaignId, rulesetId);

        }

        /// <summary>
        /// Delete ruleset 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->DeleteRuleset");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->DeleteRuleset");
            // verify the required parameter 'rulesetId' is set
            if (rulesetId == null)
                throw new ApiException(400, "Missing required parameter 'rulesetId' when calling ManagementApi->DeleteRuleset");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (rulesetId != null) localVarPathParams.Add("rulesetId", this.Configuration.ApiClient.ParameterToString(rulesetId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRuleset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Export coupons to a CSV file Download a file with the coupons that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>string</returns>
        public string ExportCoupons (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
             ApiResponse<string> localVarResponse = ExportCouponsWithHttpInfo(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export coupons to a CSV file Download a file with the coupons that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ExportCouponsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ExportCoupons");

            var localVarPath = "/v1/applications/{applicationId}/export_coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (dateFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFormat", dateFormat)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export coupons to a CSV file Download a file with the coupons that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCouponsAsync (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
             ApiResponse<string> localVarResponse = await ExportCouponsAsyncWithHttpInfo(applicationId, campaignId, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, dateFormat, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export coupons to a CSV file Download a file with the coupons that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportCouponsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string dateFormat = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ExportCoupons");

            var localVarPath = "/v1/applications/{applicationId}/export_coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (dateFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFormat", dateFormat)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export Customer Sessions to a CSV file Download a file with the customer sessions that match the request.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>string</returns>
        public string ExportCustomerSessions (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
             ApiResponse<string> localVarResponse = ExportCustomerSessionsWithHttpInfo(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export Customer Sessions to a CSV file Download a file with the customer sessions that match the request.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ExportCustomerSessionsWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ExportCustomerSessions");

            var localVarPath = "/v1/applications/{applicationId}/export_customer_sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (profileIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profileIntegrationId", profileIntegrationId)); // query parameter
            if (dateFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFormat", dateFormat)); // query parameter
            if (customerSessionState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerSessionState", customerSessionState)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCustomerSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export Customer Sessions to a CSV file Download a file with the customer sessions that match the request.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportCustomerSessionsAsync (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
             ApiResponse<string> localVarResponse = await ExportCustomerSessionsAsyncWithHttpInfo(applicationId, createdBefore, createdAfter, profileIntegrationId, dateFormat, customerSessionState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export Customer Sessions to a CSV file Download a file with the customer sessions that match the request.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string. (optional)</param>
        /// <param name="profileIntegrationId">Only return sessions for the customer that matches this customer integration ID. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <param name="customerSessionState">Filter results by state. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportCustomerSessionsAsyncWithHttpInfo (int applicationId, DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string profileIntegrationId = default(string), string dateFormat = default(string), string customerSessionState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ExportCustomerSessions");

            var localVarPath = "/v1/applications/{applicationId}/export_customer_sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (profileIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profileIntegrationId", profileIntegrationId)); // query parameter
            if (dateFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFormat", dateFormat)); // query parameter
            if (customerSessionState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerSessionState", customerSessionState)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportCustomerSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export triggered Effects to a CSV file Download a file with the triggered effects that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportEffects (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             ApiResponse<string> localVarResponse = ExportEffectsWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export triggered Effects to a CSV file Download a file with the triggered effects that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ExportEffectsWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ExportEffects");

            var localVarPath = "/v1/applications/{applicationId}/export_effects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (dateFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFormat", dateFormat)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportEffects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export triggered Effects to a CSV file Download a file with the triggered effects that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportEffectsAsync (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
             ApiResponse<string> localVarResponse = await ExportEffectsAsyncWithHttpInfo(applicationId, campaignId, createdBefore, createdAfter, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export triggered Effects to a CSV file Download a file with the triggered effects that match the given attributes.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportEffectsAsyncWithHttpInfo (int applicationId, decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string dateFormat = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ExportEffects");

            var localVarPath = "/v1/applications/{applicationId}/export_effects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (dateFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFormat", dateFormat)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportEffects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export customer loyalty balance to a CSV file Download a file with the balance of each customer in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>string</returns>
        public string ExportLoyaltyBalance (int programID)
        {
             ApiResponse<string> localVarResponse = ExportLoyaltyBalanceWithHttpInfo(programID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export customer loyalty balance to a CSV file Download a file with the balance of each customer in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ExportLoyaltyBalanceWithHttpInfo (int programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ExportLoyaltyBalance");

            var localVarPath = "/v1/loyalty_programs/{programID}/export_customer_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportLoyaltyBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export customer loyalty balance to a CSV file Download a file with the balance of each customer in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyBalanceAsync (int programID)
        {
             ApiResponse<string> localVarResponse = await ExportLoyaltyBalanceAsyncWithHttpInfo(programID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export customer loyalty balance to a CSV file Download a file with the balance of each customer in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyBalanceAsyncWithHttpInfo (int programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ExportLoyaltyBalance");

            var localVarPath = "/v1/loyalty_programs/{programID}/export_customer_balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportLoyaltyBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to a CSV file Download a file with a customer&#39;s ledger log in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>string</returns>
        public string ExportLoyaltyLedger (int programID, string integrationID, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
             ApiResponse<string> localVarResponse = ExportLoyaltyLedgerWithHttpInfo(programID, integrationID, rangeStart, rangeEnd, dateFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to a CSV file Download a file with a customer&#39;s ledger log in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ExportLoyaltyLedgerWithHttpInfo (int programID, string integrationID, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ExportLoyaltyLedger");
            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->ExportLoyaltyLedger");
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->ExportLoyaltyLedger");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->ExportLoyaltyLedger");

            var localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}/export_log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (integrationID != null) localVarPathParams.Add("integrationID", this.Configuration.ApiClient.ParameterToString(integrationID)); // path parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (dateFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFormat", dateFormat)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportLoyaltyLedger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to a CSV file Download a file with a customer&#39;s ledger log in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ExportLoyaltyLedgerAsync (int programID, string integrationID, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
             ApiResponse<string> localVarResponse = await ExportLoyaltyLedgerAsyncWithHttpInfo(programID, integrationID, rangeStart, rangeEnd, dateFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Export a customer&#39;s loyalty ledger log to a CSV file Download a file with a customer&#39;s ledger log in the loyalty program
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="dateFormat">Determines the format of dates in the export document. (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ExportLoyaltyLedgerAsyncWithHttpInfo (int programID, string integrationID, DateTime rangeStart, DateTime rangeEnd, string dateFormat = default(string))
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ExportLoyaltyLedger");
            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->ExportLoyaltyLedger");
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->ExportLoyaltyLedger");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->ExportLoyaltyLedger");

            var localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}/export_log";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/csv"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (integrationID != null) localVarPathParams.Add("integrationID", this.Configuration.ApiClient.ParameterToString(integrationID)); // path parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (dateFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFormat", dateFormat)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExportLoyaltyLedger", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get access logs for application (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetAccessLogs (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2008> localVarResponse = GetAccessLogsWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get access logs for application (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> GetAccessLogsWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetAccessLogs");
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetAccessLogs");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetAccessLogs");

            var localVarPath = "/v1/applications/{applicationId}/access_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (method != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "method", method)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Get access logs for application (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetAccessLogsAsync (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2008> localVarResponse = await GetAccessLogsAsyncWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get access logs for application (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetAccessLogsAsyncWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetAccessLogs");
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetAccessLogs");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetAccessLogs");

            var localVarPath = "/v1/applications/{applicationId}/access_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (method != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "method", method)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// Get access logs for application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 GetAccessLogsWithoutTotalCount (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2009> localVarResponse = GetAccessLogsWithoutTotalCountWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get access logs for application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> GetAccessLogsWithoutTotalCountWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetAccessLogsWithoutTotalCount");
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetAccessLogsWithoutTotalCount");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetAccessLogsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/access_logs/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (method != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "method", method)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessLogsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Get access logs for application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> GetAccessLogsWithoutTotalCountAsync (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2009> localVarResponse = await GetAccessLogsWithoutTotalCountAsyncWithHttpInfo(applicationId, rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get access logs for application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> GetAccessLogsWithoutTotalCountAsyncWithHttpInfo (int applicationId, DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetAccessLogsWithoutTotalCount");
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetAccessLogsWithoutTotalCount");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetAccessLogsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/access_logs/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (method != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "method", method)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccessLogsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Get Account Details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Account</returns>
        public Account GetAccount (int accountId)
        {
             ApiResponse<Account> localVarResponse = GetAccountWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of Account</returns>
        public ApiResponse<Account> GetAccountWithHttpInfo (int accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ManagementApi->GetAccount");

            var localVarPath = "/v1/accounts/{accountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Get Account Details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of Account</returns>
        public async System.Threading.Tasks.Task<Account> GetAccountAsync (int accountId)
        {
             ApiResponse<Account> localVarResponse = await GetAccountAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Details Return the details of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (Account)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Account>> GetAccountAsyncWithHttpInfo (int accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ManagementApi->GetAccount");

            var localVarPath = "/v1/accounts/{accountId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Account>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Account) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Account)));
        }

        /// <summary>
        /// Get Account Analytics Return the analytics of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>AccountAnalytics</returns>
        public AccountAnalytics GetAccountAnalytics (int accountId)
        {
             ApiResponse<AccountAnalytics> localVarResponse = GetAccountAnalyticsWithHttpInfo(accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Account Analytics Return the analytics of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of AccountAnalytics</returns>
        public ApiResponse<AccountAnalytics> GetAccountAnalyticsWithHttpInfo (int accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ManagementApi->GetAccountAnalytics");

            var localVarPath = "/v1/accounts/{accountId}/analytics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAnalytics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAnalytics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountAnalytics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAnalytics)));
        }

        /// <summary>
        /// Get Account Analytics Return the analytics of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of AccountAnalytics</returns>
        public async System.Threading.Tasks.Task<AccountAnalytics> GetAccountAnalyticsAsync (int accountId)
        {
             ApiResponse<AccountAnalytics> localVarResponse = await GetAccountAnalyticsAsyncWithHttpInfo(accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Account Analytics Return the analytics of your companies Talon.One account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (AccountAnalytics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountAnalytics>> GetAccountAnalyticsAsyncWithHttpInfo (int accountId)
        {
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ManagementApi->GetAccountAnalytics");

            var localVarPath = "/v1/accounts/{accountId}/analytics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountAnalytics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAnalytics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountAnalytics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAnalytics)));
        }

        /// <summary>
        /// Get an additional cost Returns additional cost for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost GetAdditionalCost (int additionalCostId)
        {
             ApiResponse<AccountAdditionalCost> localVarResponse = GetAdditionalCostWithHttpInfo(additionalCostId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an additional cost Returns additional cost for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public ApiResponse<AccountAdditionalCost> GetAdditionalCostWithHttpInfo (int additionalCostId)
        {
            // verify the required parameter 'additionalCostId' is set
            if (additionalCostId == null)
                throw new ApiException(400, "Missing required parameter 'additionalCostId' when calling ManagementApi->GetAdditionalCost");

            var localVarPath = "/v1/additional_costs/{additionalCostId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalCostId != null) localVarPathParams.Add("additionalCostId", this.Configuration.ApiClient.ParameterToString(additionalCostId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAdditionalCost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountAdditionalCost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAdditionalCost)));
        }

        /// <summary>
        /// Get an additional cost Returns additional cost for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> GetAdditionalCostAsync (int additionalCostId)
        {
             ApiResponse<AccountAdditionalCost> localVarResponse = await GetAdditionalCostAsyncWithHttpInfo(additionalCostId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an additional cost Returns additional cost for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> GetAdditionalCostAsyncWithHttpInfo (int additionalCostId)
        {
            // verify the required parameter 'additionalCostId' is set
            if (additionalCostId == null)
                throw new ApiException(400, "Missing required parameter 'additionalCostId' when calling ManagementApi->GetAdditionalCost");

            var localVarPath = "/v1/additional_costs/{additionalCostId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalCostId != null) localVarPathParams.Add("additionalCostId", this.Configuration.ApiClient.ParameterToString(additionalCostId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAdditionalCost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountAdditionalCost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAdditionalCost)));
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GetAdditionalCosts (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse20021> localVarResponse = GetAdditionalCostsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public ApiResponse<InlineResponse20021> GetAdditionalCostsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            var localVarPath = "/v1/additional_costs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalCosts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GetAdditionalCostsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse20021> localVarResponse = await GetAdditionalCostsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List additional costs Returns all the defined additional costs for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GetAdditionalCostsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            var localVarPath = "/v1/additional_costs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAdditionalCosts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20021>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20021) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20021)));
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 GetAllAccessLogs (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2008> localVarResponse = GetAllAccessLogsWithHttpInfo(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> GetAllAccessLogsWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetAllAccessLogs");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetAllAccessLogs");

            var localVarPath = "/v1/access_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (method != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "method", method)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccessLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> GetAllAccessLogsAsync (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2008> localVarResponse = await GetAllAccessLogsAsyncWithHttpInfo(rangeStart, rangeEnd, path, method, status, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List access logs Fetches the access logs for the entire account. Sensitive requests (logins) are _always_ filtered from the logs. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="path">Only return results where the request path matches the given regular expression. (optional)</param>
        /// <param name="method">Only return results where the request method matches the given regular expression. (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> GetAllAccessLogsAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, string path = default(string), string method = default(string), string status = default(string), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetAllAccessLogs");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetAllAccessLogs");

            var localVarPath = "/v1/access_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            if (method != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "method", method)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllAccessLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2008)));
        }

        /// <summary>
        /// List roles 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GetAllRoles ()
        {
             ApiResponse<InlineResponse20029> localVarResponse = GetAllRolesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List roles 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public ApiResponse<InlineResponse20029> GetAllRolesWithHttpInfo ()
        {

            var localVarPath = "/v1/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// List roles 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> GetAllRolesAsync ()
        {
             ApiResponse<InlineResponse20029> localVarResponse = await GetAllRolesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List roles 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GetAllRolesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/roles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllRoles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20029>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20029) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20029)));
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Application</returns>
        public Application GetApplication (int applicationId)
        {
             ApiResponse<Application> localVarResponse = GetApplicationWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of Application</returns>
        public ApiResponse<Application> GetApplicationWithHttpInfo (int applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplication");

            var localVarPath = "/v1/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of Application</returns>
        public async System.Threading.Tasks.Task<Application> GetApplicationAsync (int applicationId)
        {
             ApiResponse<Application> localVarResponse = await GetApplicationAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application Get the application specified by the ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (Application)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Application>> GetApplicationAsyncWithHttpInfo (int applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplication");

            var localVarPath = "/v1/applications/{applicationId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Application>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Application) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Application)));
        }

        /// <summary>
        /// Get report of health of application API 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApplicationApiHealth</returns>
        public ApplicationApiHealth GetApplicationApiHealth (int applicationId)
        {
             ApiResponse<ApplicationApiHealth> localVarResponse = GetApplicationApiHealthWithHttpInfo(applicationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get report of health of application API 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>ApiResponse of ApplicationApiHealth</returns>
        public ApiResponse<ApplicationApiHealth> GetApplicationApiHealthWithHttpInfo (int applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationApiHealth");

            var localVarPath = "/v1/applications/{applicationId}/health_report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationApiHealth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationApiHealth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationApiHealth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationApiHealth)));
        }

        /// <summary>
        /// Get report of health of application API 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApplicationApiHealth</returns>
        public async System.Threading.Tasks.Task<ApplicationApiHealth> GetApplicationApiHealthAsync (int applicationId)
        {
             ApiResponse<ApplicationApiHealth> localVarResponse = await GetApplicationApiHealthAsyncWithHttpInfo(applicationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get report of health of application API 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <returns>Task of ApiResponse (ApplicationApiHealth)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationApiHealth>> GetApplicationApiHealthAsyncWithHttpInfo (int applicationId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationApiHealth");

            var localVarPath = "/v1/applications/{applicationId}/health_report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationApiHealth", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationApiHealth>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationApiHealth) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationApiHealth)));
        }

        /// <summary>
        /// Get Application Customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApplicationCustomer</returns>
        public ApplicationCustomer GetApplicationCustomer (int applicationId, int customerId)
        {
             ApiResponse<ApplicationCustomer> localVarResponse = GetApplicationCustomerWithHttpInfo(applicationId, customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        public ApiResponse<ApplicationCustomer> GetApplicationCustomerWithHttpInfo (int applicationId, int customerId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationCustomer");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling ManagementApi->GetApplicationCustomer");

            var localVarPath = "/v1/applications/{applicationId}/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationCustomer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationCustomer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationCustomer)));
        }

        /// <summary>
        /// Get Application Customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApplicationCustomer</returns>
        public async System.Threading.Tasks.Task<ApplicationCustomer> GetApplicationCustomerAsync (int applicationId, int customerId)
        {
             ApiResponse<ApplicationCustomer> localVarResponse = await GetApplicationCustomerAsyncWithHttpInfo(applicationId, customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application Customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationCustomer>> GetApplicationCustomerAsyncWithHttpInfo (int applicationId, int customerId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationCustomer");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling ManagementApi->GetApplicationCustomer");

            var localVarPath = "/v1/applications/{applicationId}/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationCustomer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationCustomer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationCustomer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationCustomer)));
        }

        /// <summary>
        /// List Application Customers 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 GetApplicationCustomers (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             ApiResponse<InlineResponse20011> localVarResponse = GetApplicationCustomersWithHttpInfo(applicationId, integrationId, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Application Customers 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> GetApplicationCustomersWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationCustomers");

            var localVarPath = "/v1/applications/{applicationId}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationId", integrationId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (withTotalResultSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withTotalResultSize", withTotalResultSize)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// List Application Customers 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> GetApplicationCustomersAsync (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
             ApiResponse<InlineResponse20011> localVarResponse = await GetApplicationCustomersAsyncWithHttpInfo(applicationId, integrationId, pageSize, skip, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Application Customers 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="integrationId">Filter results performing an exact matching against the profile integration identifier. (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> GetApplicationCustomersAsyncWithHttpInfo (int applicationId, string integrationId = default(string), int? pageSize = default(int?), int? skip = default(int?), bool? withTotalResultSize = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationCustomers");

            var localVarPath = "/v1/applications/{applicationId}/customers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationId", integrationId)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (withTotalResultSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withTotalResultSize", withTotalResultSize)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationCustomers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        /// Get a list of the customer profiles that match the given attributes (with total count) Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetApplicationCustomersByAttributes (ApplicationCustomerSearch applicationCustomerSearch)
        {
             ApiResponse<InlineResponse20012> localVarResponse = GetApplicationCustomersByAttributesWithHttpInfo(applicationCustomerSearch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of the customer profiles that match the given attributes (with total count) Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetApplicationCustomersByAttributesWithHttpInfo (ApplicationCustomerSearch applicationCustomerSearch)
        {
            // verify the required parameter 'applicationCustomerSearch' is set
            if (applicationCustomerSearch == null)
                throw new ApiException(400, "Missing required parameter 'applicationCustomerSearch' when calling ManagementApi->GetApplicationCustomersByAttributes");

            var localVarPath = "/v1/application_customer_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationCustomerSearch != null && applicationCustomerSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationCustomerSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationCustomerSearch; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationCustomersByAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// Get a list of the customer profiles that match the given attributes (with total count) Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetApplicationCustomersByAttributesAsync (ApplicationCustomerSearch applicationCustomerSearch)
        {
             ApiResponse<InlineResponse20012> localVarResponse = await GetApplicationCustomersByAttributesAsyncWithHttpInfo(applicationCustomerSearch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of the customer profiles that match the given attributes (with total count) Gets a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetApplicationCustomersByAttributesAsyncWithHttpInfo (ApplicationCustomerSearch applicationCustomerSearch)
        {
            // verify the required parameter 'applicationCustomerSearch' is set
            if (applicationCustomerSearch == null)
                throw new ApiException(400, "Missing required parameter 'applicationCustomerSearch' when calling ManagementApi->GetApplicationCustomersByAttributes");

            var localVarPath = "/v1/application_customer_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationCustomerSearch != null && applicationCustomerSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationCustomerSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationCustomerSearch; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationCustomersByAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// List Applications Event Types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GetApplicationEventTypes (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse20018> localVarResponse = GetApplicationEventTypesWithHttpInfo(applicationId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications Event Types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public ApiResponse<InlineResponse20018> GetApplicationEventTypesWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationEventTypes");

            var localVarPath = "/v1/applications/{applicationId}/event_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationEventTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// List Applications Event Types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> GetApplicationEventTypesAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse20018> localVarResponse = await GetApplicationEventTypesAsyncWithHttpInfo(applicationId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications Event Types Get all of the distinct values of the Event &#x60;type&#x60; property for events recorded in the application.  See also: [Track an event](/integration-api/reference/#trackEvent) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GetApplicationEventTypesAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationEventTypes");

            var localVarPath = "/v1/applications/{applicationId}/event_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationEventTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20018>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20018) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20018)));
        }

        /// <summary>
        /// List Applications Events (with total count) Lists all events recorded for an application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GetApplicationEvents (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             ApiResponse<InlineResponse20016> localVarResponse = GetApplicationEventsWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications Events (with total count) Lists all events recorded for an application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse<InlineResponse20016> GetApplicationEventsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationEvents");

            var localVarPath = "/v1/applications/{applicationId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (session != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session", session)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (customerName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerName", customerName)); // query parameter
            if (customerEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerEmail", customerEmail)); // query parameter
            if (couponCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "couponCode", couponCode)); // query parameter
            if (referralCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralCode", referralCode)); // query parameter
            if (ruleQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ruleQuery", ruleQuery)); // query parameter
            if (campaignQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignQuery", campaignQuery)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// List Applications Events (with total count) Lists all events recorded for an application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> GetApplicationEventsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             ApiResponse<InlineResponse20016> localVarResponse = await GetApplicationEventsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications Events (with total count) Lists all events recorded for an application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GetApplicationEventsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationEvents");

            var localVarPath = "/v1/applications/{applicationId}/events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (session != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session", session)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (customerName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerName", customerName)); // query parameter
            if (customerEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerEmail", customerEmail)); // query parameter
            if (couponCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "couponCode", couponCode)); // query parameter
            if (referralCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralCode", referralCode)); // query parameter
            if (ruleQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ruleQuery", ruleQuery)); // query parameter
            if (campaignQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignQuery", campaignQuery)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// List Applications Events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GetApplicationEventsWithoutTotalCount (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             ApiResponse<InlineResponse20017> localVarResponse = GetApplicationEventsWithoutTotalCountWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications Events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse<InlineResponse20017> GetApplicationEventsWithoutTotalCountWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationEventsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/events/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (session != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session", session)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (customerName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerName", customerName)); // query parameter
            if (customerEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerEmail", customerEmail)); // query parameter
            if (couponCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "couponCode", couponCode)); // query parameter
            if (referralCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralCode", referralCode)); // query parameter
            if (ruleQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ruleQuery", ruleQuery)); // query parameter
            if (campaignQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignQuery", campaignQuery)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationEventsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// List Applications Events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GetApplicationEventsWithoutTotalCountAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
             ApiResponse<InlineResponse20017> localVarResponse = await GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo(applicationId, pageSize, skip, sort, type, createdBefore, createdAfter, session, profile, customerName, customerEmail, couponCode, referralCode, ruleQuery, campaignQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications Events Lists all events recorded for an application. Instead of having the total number of results in the response, this endpoint only if there are more results. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="type">Comma-separated list of types by which to filter events. Must be exact match(es). (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="session">Session integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="profile">Profile integration ID filter for events. Must be exact match. (optional)</param>
        /// <param name="customerName">Customer name filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="customerEmail">Customer e-mail address filter for events. Will match substrings case-insensitively. (optional)</param>
        /// <param name="couponCode">Coupon code (optional)</param>
        /// <param name="referralCode">Referral code (optional)</param>
        /// <param name="ruleQuery">Rule name filter for events (optional)</param>
        /// <param name="campaignQuery">Campaign name filter for events (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GetApplicationEventsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string type = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string session = default(string), string profile = default(string), string customerName = default(string), string customerEmail = default(string), string couponCode = default(string), string referralCode = default(string), string ruleQuery = default(string), string campaignQuery = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationEventsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/events/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (session != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "session", session)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (customerName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerName", customerName)); // query parameter
            if (customerEmail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerEmail", customerEmail)); // query parameter
            if (couponCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "couponCode", couponCode)); // query parameter
            if (referralCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralCode", referralCode)); // query parameter
            if (ruleQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ruleQuery", ruleQuery)); // query parameter
            if (campaignQuery != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignQuery", campaignQuery)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationEventsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// Get Application Session 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>ApplicationSession</returns>
        public ApplicationSession GetApplicationSession (int applicationId, int sessionId)
        {
             ApiResponse<ApplicationSession> localVarResponse = GetApplicationSessionWithHttpInfo(applicationId, sessionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Application Session 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>ApiResponse of ApplicationSession</returns>
        public ApiResponse<ApplicationSession> GetApplicationSessionWithHttpInfo (int applicationId, int sessionId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling ManagementApi->GetApplicationSession");

            var localVarPath = "/v1/applications/{applicationId}/sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationSession)));
        }

        /// <summary>
        /// Get Application Session 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>Task of ApplicationSession</returns>
        public async System.Threading.Tasks.Task<ApplicationSession> GetApplicationSessionAsync (int applicationId, int sessionId)
        {
             ApiResponse<ApplicationSession> localVarResponse = await GetApplicationSessionAsyncWithHttpInfo(applicationId, sessionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Application Session 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="sessionId"></param>
        /// <returns>Task of ApiResponse (ApplicationSession)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationSession>> GetApplicationSessionAsyncWithHttpInfo (int applicationId, int sessionId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationSession");
            // verify the required parameter 'sessionId' is set
            if (sessionId == null)
                throw new ApiException(400, "Missing required parameter 'sessionId' when calling ManagementApi->GetApplicationSession");

            var localVarPath = "/v1/applications/{applicationId}/sessions/{sessionId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (sessionId != null) localVarPathParams.Add("sessionId", this.Configuration.ApiClient.ParameterToString(sessionId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSession", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationSession>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationSession) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationSession)));
        }

        /// <summary>
        /// List Application Sessions 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GetApplicationSessions (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
             ApiResponse<InlineResponse20015> localVarResponse = GetApplicationSessionsWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Application Sessions 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse<InlineResponse20015> GetApplicationSessionsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationSessions");

            var localVarPath = "/v1/applications/{applicationId}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (coupon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "coupon", coupon)); // query parameter
            if (referral != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referral", referral)); // query parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationId", integrationId)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// List Application Sessions 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GetApplicationSessionsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
             ApiResponse<InlineResponse20015> localVarResponse = await GetApplicationSessionsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, profile, state, createdBefore, createdAfter, coupon, referral, integrationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Application Sessions 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="profile">Profile integration ID filter for sessions. Must be exact match. (optional)</param>
        /// <param name="state">Filter by sessions with this state. Must be exact match. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Only return events created after this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="coupon">Filter by sessions with this coupon. Must be exact match. (optional)</param>
        /// <param name="referral">Filter by sessions with this referral. Must be exact match. (optional)</param>
        /// <param name="integrationId">Filter by sessions with this integrationId. Must be exact match. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GetApplicationSessionsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string profile = default(string), string state = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string coupon = default(string), string referral = default(string), string integrationId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetApplicationSessions");

            var localVarPath = "/v1/applications/{applicationId}/sessions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (profile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "profile", profile)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (coupon != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "coupon", coupon)); // query parameter
            if (referral != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referral", referral)); // query parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationId", integrationId)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationSessions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// List Applications List all application in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetApplications (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetApplicationsWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications List all application in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetApplicationsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            var localVarPath = "/v1/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// List Applications List all application in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetApplicationsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetApplicationsAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications List all application in the current account.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetApplicationsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            var localVarPath = "/v1/applications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Get a custom attribute Returns custom attribute for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Attribute</returns>
        public Attribute GetAttribute (int attributeId)
        {
             ApiResponse<Attribute> localVarResponse = GetAttributeWithHttpInfo(attributeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom attribute Returns custom attribute for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>ApiResponse of Attribute</returns>
        public ApiResponse<Attribute> GetAttributeWithHttpInfo (int attributeId)
        {
            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
                throw new ApiException(400, "Missing required parameter 'attributeId' when calling ManagementApi->GetAttribute");

            var localVarPath = "/v1/attributes/{attributeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeId != null) localVarPathParams.Add("attributeId", this.Configuration.ApiClient.ParameterToString(attributeId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Attribute) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attribute)));
        }

        /// <summary>
        /// Get a custom attribute Returns custom attribute for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> GetAttributeAsync (int attributeId)
        {
             ApiResponse<Attribute> localVarResponse = await GetAttributeAsyncWithHttpInfo(attributeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a custom attribute Returns custom attribute for the account by its id. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Attribute>> GetAttributeAsyncWithHttpInfo (int attributeId)
        {
            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
                throw new ApiException(400, "Missing required parameter 'attributeId' when calling ManagementApi->GetAttribute");

            var localVarPath = "/v1/attributes/{attributeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeId != null) localVarPathParams.Add("attributeId", this.Configuration.ApiClient.ParameterToString(attributeId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Attribute) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attribute)));
        }

        /// <summary>
        /// List custom attributes Returns all the defined custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="entity"> (optional)</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GetAttributes (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {
             ApiResponse<InlineResponse20020> localVarResponse = GetAttributesWithHttpInfo(pageSize, skip, sort, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List custom attributes Returns all the defined custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="entity"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public ApiResponse<InlineResponse20020> GetAttributesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {

            var localVarPath = "/v1/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (entity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entity", entity)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// List custom attributes Returns all the defined custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="entity"> (optional)</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GetAttributesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {
             ApiResponse<InlineResponse20020> localVarResponse = await GetAttributesAsyncWithHttpInfo(pageSize, skip, sort, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List custom attributes Returns all the defined custom attributes for the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="entity"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GetAttributesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string entity = default(string))
        {

            var localVarPath = "/v1/attributes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (entity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entity", entity)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20020>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20020) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20020)));
        }

        /// <summary>
        /// List audiences Get All audiences created in the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GetAudiences (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             ApiResponse<InlineResponse20019> localVarResponse = GetAudiencesWithHttpInfo(pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List audiences Get All audiences created in the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public ApiResponse<InlineResponse20019> GetAudiencesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {

            var localVarPath = "/v1/audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (withTotalResultSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withTotalResultSize", withTotalResultSize)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// List audiences Get All audiences created in the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> GetAudiencesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {
             ApiResponse<InlineResponse20019> localVarResponse = await GetAudiencesAsyncWithHttpInfo(pageSize, skip, sort, withTotalResultSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List audiences Get All audiences created in the account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GetAudiencesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), bool? withTotalResultSize = default(bool?))
        {

            var localVarPath = "/v1/audiences";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (withTotalResultSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withTotalResultSize", withTotalResultSize)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAudiences", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20019>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20019) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20019)));
        }

        /// <summary>
        /// Get campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Campaign</returns>
        public Campaign GetCampaign (int applicationId, int campaignId)
        {
             ApiResponse<Campaign> localVarResponse = GetCampaignWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>ApiResponse of Campaign</returns>
        public ApiResponse<Campaign> GetCampaignWithHttpInfo (int applicationId, int campaignId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCampaign");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// Get campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> GetCampaignAsync (int applicationId, int campaignId)
        {
             ApiResponse<Campaign> localVarResponse = await GetCampaignAsyncWithHttpInfo(applicationId, campaignId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Campaign>> GetCampaignAsyncWithHttpInfo (int applicationId, int campaignId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCampaign");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// Get analytics of campaigns 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 GetCampaignAnalytics (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
             ApiResponse<InlineResponse20010> localVarResponse = GetCampaignAnalyticsWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get analytics of campaigns 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public ApiResponse<InlineResponse20010> GetCampaignAnalyticsWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCampaignAnalytics");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCampaignAnalytics");
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetCampaignAnalytics");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetCampaignAnalytics");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/analytics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (granularity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularity", granularity)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignAnalytics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// Get analytics of campaigns 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> GetCampaignAnalyticsAsync (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
             ApiResponse<InlineResponse20010> localVarResponse = await GetCampaignAnalyticsAsyncWithHttpInfo(applicationId, campaignId, rangeStart, rangeEnd, granularity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get analytics of campaigns 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="granularity">The time interval between the results in the returned time-series. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> GetCampaignAnalyticsAsyncWithHttpInfo (int applicationId, int campaignId, DateTime rangeStart, DateTime rangeEnd, string granularity = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCampaignAnalytics");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCampaignAnalytics");
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetCampaignAnalytics");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetCampaignAnalytics");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/analytics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (granularity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "granularity", granularity)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignAnalytics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20010>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20010) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20010)));
        }

        /// <summary>
        /// List campaigns that match the given attributes Gets a list of all the campaigns that exactly match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetCampaignByAttributes (int applicationId, CampaignSearch campaignSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetCampaignByAttributesWithHttpInfo(applicationId, campaignSearch, pageSize, skip, sort, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaigns that match the given attributes Gets a list of all the campaigns that exactly match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetCampaignByAttributesWithHttpInfo (int applicationId, CampaignSearch campaignSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCampaignByAttributes");
            // verify the required parameter 'campaignSearch' is set
            if (campaignSearch == null)
                throw new ApiException(400, "Missing required parameter 'campaignSearch' when calling ManagementApi->GetCampaignByAttributes");

            var localVarPath = "/v1/applications/{applicationId}/campaigns_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (campaignSearch != null && campaignSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignSearch; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignByAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// List campaigns that match the given attributes Gets a list of all the campaigns that exactly match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetCampaignByAttributesAsync (int applicationId, CampaignSearch campaignSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetCampaignByAttributesAsyncWithHttpInfo(applicationId, campaignSearch, pageSize, skip, sort, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaigns that match the given attributes Gets a list of all the campaigns that exactly match a set of attributes. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetCampaignByAttributesAsyncWithHttpInfo (int applicationId, CampaignSearch campaignSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCampaignByAttributes");
            // verify the required parameter 'campaignSearch' is set
            if (campaignSearch == null)
                throw new ApiException(400, "Missing required parameter 'campaignSearch' when calling ManagementApi->GetCampaignByAttributes");

            var localVarPath = "/v1/applications/{applicationId}/campaigns_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (campaignSearch != null && campaignSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(campaignSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = campaignSearch; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignByAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// List campaigns 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetCampaigns (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?))
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetCampaignsWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List campaigns 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> GetCampaignsWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCampaigns");

            var localVarPath = "/v1/applications/{applicationId}/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (campaignGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignGroupId", campaignGroupId)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// List campaigns 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetCampaignsAsync (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?))
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetCampaignsAsyncWithHttpInfo(applicationId, pageSize, skip, sort, campaignState, name, tags, createdBefore, createdAfter, campaignGroupId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List campaigns 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <param name="name">Filter results performing case-insensitive matching against the name of the campaign. (optional)</param>
        /// <param name="tags">Filter results performing case-insensitive matching against the tags of the campaign. When used in conjunction with the \&quot;name\&quot; query parameter, a logical OR will be performed to search both tags and name for the provided values  (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the campaign creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="campaignGroupId">Filter results to campaigns owned by the specified campaign group ID. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetCampaignsAsyncWithHttpInfo (int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string campaignState = default(string), string name = default(string), string tags = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), int? campaignGroupId = default(int?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCampaigns");

            var localVarPath = "/v1/applications/{applicationId}/campaigns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (tags != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tags", tags)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (campaignGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignGroupId", campaignGroupId)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Get audit log for an account Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GetChanges (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?))
        {
             ApiResponse<InlineResponse20027> localVarResponse = GetChangesWithHttpInfo(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, includeOld);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get audit log for an account Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public ApiResponse<InlineResponse20027> GetChangesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?))
        {

            var localVarPath = "/v1/changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (entityPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityPath", entityPath)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (withTotalResultSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withTotalResultSize", withTotalResultSize)); // query parameter
            if (includeOld != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeOld", includeOld)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// Get audit log for an account Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GetChangesAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?))
        {
             ApiResponse<InlineResponse20027> localVarResponse = await GetChangesAsyncWithHttpInfo(pageSize, skip, sort, applicationId, entityPath, userId, createdBefore, createdAfter, withTotalResultSize, includeOld);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get audit log for an account Get list of changes caused by API calls for an account. Only accessible for admins.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="entityPath">Filter results on a case insensitive matching of the url path of the entity (optional)</param>
        /// <param name="userId"> (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the change creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="withTotalResultSize">When this flag is set, the result will include the total size of the result, across all pages. This might decrease performance on large data sets. With this flag set to true, hasMore will be be true whenever there is a next page. totalResultSize will always be zero. With this flag set to false, hasMore will always be set to false. totalResultSize will contain the total number of results for this query.  (optional)</param>
        /// <param name="includeOld">When this flag is set to false, the state without the change will not be returned. The default value is true. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GetChangesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), int? applicationId = default(int?), string entityPath = default(string), int? userId = default(int?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), bool? withTotalResultSize = default(bool?), bool? includeOld = default(bool?))
        {

            var localVarPath = "/v1/changes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (entityPath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityPath", entityPath)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (withTotalResultSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "withTotalResultSize", withTotalResultSize)); // query parameter
            if (includeOld != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeOld", includeOld)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChanges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20027>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20027) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20027)));
        }

        /// <summary>
        /// List coupons (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetCoupons (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             ApiResponse<InlineResponse2004> localVarResponse = GetCouponsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetCouponsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCoupons");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCoupons");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (startsAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsAfter", startsAfter)); // query parameter
            if (startsBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsBefore", startsBefore)); // query parameter
            if (expiresAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresAfter", expiresAfter)); // query parameter
            if (expiresBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresBefore", expiresBefore)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetCouponsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
             ApiResponse<InlineResponse2004> localVarResponse = await GetCouponsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, startsAfter, startsBefore, expiresAfter, expiresBefore, valid, batchId, usable, referralId, recipientIntegrationId, exactMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="startsBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="expiresBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCouponsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? startsAfter = default(DateTime?), DateTime? startsBefore = default(DateTime?), DateTime? expiresAfter = default(DateTime?), DateTime? expiresBefore = default(DateTime?), string valid = default(string), string batchId = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCoupons");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCoupons");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (startsAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsAfter", startsAfter)); // query parameter
            if (startsBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startsBefore", startsBefore)); // query parameter
            if (expiresAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresAfter", expiresAfter)); // query parameter
            if (expiresBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expiresBefore", expiresBefore)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons that match the given attributes Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetCouponsByAttributes (int applicationId, int campaignId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = GetCouponsByAttributesWithHttpInfo(applicationId, campaignId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetCouponsByAttributesWithHttpInfo (int applicationId, int campaignId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCouponsByAttributes");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCouponsByAttributes");
            // verify the required parameter 'couponSearch' is set
            if (couponSearch == null)
                throw new ApiException(400, "Missing required parameter 'couponSearch' when calling ManagementApi->GetCouponsByAttributes");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (couponSearch != null && couponSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponSearch; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponsByAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons that match the given attributes Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetCouponsByAttributesAsync (int applicationId, int campaignId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = await GetCouponsByAttributesAsyncWithHttpInfo(applicationId, campaignId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes Gets a list of all the coupons that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a coupon, even if the coupon has more attributes that are not present on the request. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCouponsByAttributesAsyncWithHttpInfo (int applicationId, int campaignId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCouponsByAttributes");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCouponsByAttributes");
            // verify the required parameter 'couponSearch' is set
            if (couponSearch == null)
                throw new ApiException(400, "Missing required parameter 'couponSearch' when calling ManagementApi->GetCouponsByAttributes");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (couponSearch != null && couponSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponSearch; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponsByAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count) Gets a list of all the coupons with attributes matching the query criteria Application wide 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 GetCouponsByAttributesApplicationWide (int applicationId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = GetCouponsByAttributesApplicationWideWithHttpInfo(applicationId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count) Gets a list of all the coupons with attributes matching the query criteria Application wide 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> GetCouponsByAttributesApplicationWideWithHttpInfo (int applicationId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCouponsByAttributesApplicationWide");
            // verify the required parameter 'couponSearch' is set
            if (couponSearch == null)
                throw new ApiException(400, "Missing required parameter 'couponSearch' when calling ManagementApi->GetCouponsByAttributesApplicationWide");

            var localVarPath = "/v1/applications/{applicationId}/coupons_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (couponSearch != null && couponSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponSearch; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponsByAttributesApplicationWide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count) Gets a list of all the coupons with attributes matching the query criteria Application wide 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> GetCouponsByAttributesApplicationWideAsync (int applicationId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = await GetCouponsByAttributesApplicationWideAsyncWithHttpInfo(applicationId, couponSearch, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count) Gets a list of all the coupons with attributes matching the query criteria Application wide 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="couponSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> GetCouponsByAttributesApplicationWideAsyncWithHttpInfo (int applicationId, CouponSearch couponSearch, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCouponsByAttributesApplicationWide");
            // verify the required parameter 'couponSearch' is set
            if (couponSearch == null)
                throw new ApiException(400, "Missing required parameter 'couponSearch' when calling ManagementApi->GetCouponsByAttributesApplicationWide");

            var localVarPath = "/v1/applications/{applicationId}/coupons_search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (couponSearch != null && couponSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(couponSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = couponSearch; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponsByAttributesApplicationWide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 GetCouponsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
             ApiResponse<InlineResponse2005> localVarResponse = GetCouponsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> GetCouponsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCouponsWithoutTotalCount");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCouponsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// List coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> GetCouponsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
             ApiResponse<InlineResponse2005> localVarResponse = await GetCouponsWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> GetCouponsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCouponsWithoutTotalCount");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetCouponsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCouponsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Get Activity Report for Single Customer Fetch summary report for single application customer based on a time range
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>CustomerActivityReport</returns>
        public CustomerActivityReport GetCustomerActivityReport (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
             ApiResponse<CustomerActivityReport> localVarResponse = GetCustomerActivityReportWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Report for Single Customer Fetch summary report for single application customer based on a time range
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of CustomerActivityReport</returns>
        public ApiResponse<CustomerActivityReport> GetCustomerActivityReportWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetCustomerActivityReport");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetCustomerActivityReport");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCustomerActivityReport");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling ManagementApi->GetCustomerActivityReport");

            var localVarPath = "/v1/applications/{applicationId}/customer_activity_reports/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerActivityReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerActivityReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerActivityReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerActivityReport)));
        }

        /// <summary>
        /// Get Activity Report for Single Customer Fetch summary report for single application customer based on a time range
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of CustomerActivityReport</returns>
        public async System.Threading.Tasks.Task<CustomerActivityReport> GetCustomerActivityReportAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
             ApiResponse<CustomerActivityReport> localVarResponse = await GetCustomerActivityReportAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, customerId, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Report for Single Customer Fetch summary report for single application customer based on a time range
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (CustomerActivityReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerActivityReport>> GetCustomerActivityReportAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?))
        {
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetCustomerActivityReport");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetCustomerActivityReport");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCustomerActivityReport");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling ManagementApi->GetCustomerActivityReport");

            var localVarPath = "/v1/applications/{applicationId}/customer_activity_reports/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerActivityReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerActivityReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerActivityReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerActivityReport)));
        }

        /// <summary>
        /// Get Activity Reports for Application Customers (with total count) Fetch summary reports for all application customers based on a time range
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 GetCustomerActivityReports (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             ApiResponse<InlineResponse20013> localVarResponse = GetCustomerActivityReportsWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers (with total count) Fetch summary reports for all application customers based on a time range
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse<InlineResponse20013> GetCustomerActivityReportsWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetCustomerActivityReports");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetCustomerActivityReports");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCustomerActivityReports");

            var localVarPath = "/v1/applications/{applicationId}/customer_activity_reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationId", integrationId)); // query parameter
            if (campaignName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignName", campaignName)); // query parameter
            if (advocateName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "advocateName", advocateName)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerActivityReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Get Activity Reports for Application Customers (with total count) Fetch summary reports for all application customers based on a time range
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> GetCustomerActivityReportsAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             ApiResponse<InlineResponse20013> localVarResponse = await GetCustomerActivityReportsAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Reports for Application Customers (with total count) Fetch summary reports for all application customers based on a time range
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> GetCustomerActivityReportsAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetCustomerActivityReports");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetCustomerActivityReports");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCustomerActivityReports");

            var localVarPath = "/v1/applications/{applicationId}/customer_activity_reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationId", integrationId)); // query parameter
            if (campaignName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignName", campaignName)); // query parameter
            if (advocateName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "advocateName", advocateName)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerActivityReports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 GetCustomerActivityReportsWithoutTotalCount (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             ApiResponse<InlineResponse20014> localVarResponse = GetCustomerActivityReportsWithoutTotalCountWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse<InlineResponse20014> GetCustomerActivityReportsWithoutTotalCountWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetCustomerActivityReportsWithoutTotalCount");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetCustomerActivityReportsWithoutTotalCount");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCustomerActivityReportsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/customer_activity_reports/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationId", integrationId)); // query parameter
            if (campaignName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignName", campaignName)); // query parameter
            if (advocateName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "advocateName", advocateName)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerActivityReportsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> GetCustomerActivityReportsWithoutTotalCountAsync (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
             ApiResponse<InlineResponse20014> localVarResponse = await GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo(rangeStart, rangeEnd, applicationId, pageSize, skip, sort, name, integrationId, campaignName, advocateName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Activity Reports for Application Customers Fetch summary reports for all application customers based on a time range. Instead of having the total number of results in the response, this endpoint only if there are more results.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rangeStart">Only return results from after this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="rangeEnd">Only return results from before this timestamp, must be an RFC3339 timestamp string</param>
        /// <param name="applicationId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="name">Only return reports matching the customer name (optional)</param>
        /// <param name="integrationId">Only return reports matching the integrationId (optional)</param>
        /// <param name="campaignName">Only return reports matching the campaignName (optional)</param>
        /// <param name="advocateName">Only return reports matching the current customer referrer name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> GetCustomerActivityReportsWithoutTotalCountAsyncWithHttpInfo (DateTime rangeStart, DateTime rangeEnd, int applicationId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string name = default(string), string integrationId = default(string), string campaignName = default(string), string advocateName = default(string))
        {
            // verify the required parameter 'rangeStart' is set
            if (rangeStart == null)
                throw new ApiException(400, "Missing required parameter 'rangeStart' when calling ManagementApi->GetCustomerActivityReportsWithoutTotalCount");
            // verify the required parameter 'rangeEnd' is set
            if (rangeEnd == null)
                throw new ApiException(400, "Missing required parameter 'rangeEnd' when calling ManagementApi->GetCustomerActivityReportsWithoutTotalCount");
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCustomerActivityReportsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/customer_activity_reports/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (rangeStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeStart", rangeStart)); // query parameter
            if (rangeEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rangeEnd", rangeEnd)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (integrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationId", integrationId)); // query parameter
            if (campaignName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignName", campaignName)); // query parameter
            if (advocateName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "advocateName", advocateName)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerActivityReportsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// Get Analytics Report for a Customer Fetch analytics for single application customer
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>CustomerAnalytics</returns>
        public CustomerAnalytics GetCustomerAnalytics (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<CustomerAnalytics> localVarResponse = GetCustomerAnalyticsWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Analytics Report for a Customer Fetch analytics for single application customer
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of CustomerAnalytics</returns>
        public ApiResponse<CustomerAnalytics> GetCustomerAnalyticsWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCustomerAnalytics");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling ManagementApi->GetCustomerAnalytics");

            var localVarPath = "/v1/applications/{applicationId}/customers/{customerId}/analytics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerAnalytics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerAnalytics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerAnalytics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerAnalytics)));
        }

        /// <summary>
        /// Get Analytics Report for a Customer Fetch analytics for single application customer
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of CustomerAnalytics</returns>
        public async System.Threading.Tasks.Task<CustomerAnalytics> GetCustomerAnalyticsAsync (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<CustomerAnalytics> localVarResponse = await GetCustomerAnalyticsAsyncWithHttpInfo(applicationId, customerId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Analytics Report for a Customer Fetch analytics for single application customer
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="customerId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (CustomerAnalytics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CustomerAnalytics>> GetCustomerAnalyticsAsyncWithHttpInfo (int applicationId, int customerId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetCustomerAnalytics");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling ManagementApi->GetCustomerAnalytics");

            var localVarPath = "/v1/applications/{applicationId}/customers/{customerId}/analytics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerAnalytics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CustomerAnalytics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CustomerAnalytics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomerAnalytics)));
        }

        /// <summary>
        /// Get Customer Profile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApplicationCustomer</returns>
        public ApplicationCustomer GetCustomerProfile (int customerId)
        {
             ApiResponse<ApplicationCustomer> localVarResponse = GetCustomerProfileWithHttpInfo(customerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Profile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>ApiResponse of ApplicationCustomer</returns>
        public ApiResponse<ApplicationCustomer> GetCustomerProfileWithHttpInfo (int customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling ManagementApi->GetCustomerProfile");

            var localVarPath = "/v1/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationCustomer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationCustomer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationCustomer)));
        }

        /// <summary>
        /// Get Customer Profile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApplicationCustomer</returns>
        public async System.Threading.Tasks.Task<ApplicationCustomer> GetCustomerProfileAsync (int customerId)
        {
             ApiResponse<ApplicationCustomer> localVarResponse = await GetCustomerProfileAsyncWithHttpInfo(customerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Customer Profile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customerId"></param>
        /// <returns>Task of ApiResponse (ApplicationCustomer)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationCustomer>> GetCustomerProfileAsyncWithHttpInfo (int customerId)
        {
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling ManagementApi->GetCustomerProfile");

            var localVarPath = "/v1/customers/{customerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (customerId != null) localVarPathParams.Add("customerId", this.Configuration.ApiClient.ParameterToString(customerId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationCustomer>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ApplicationCustomer) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationCustomer)));
        }

        /// <summary>
        /// List Customer Profiles 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetCustomerProfiles (int? pageSize = default(int?), int? skip = default(int?))
        {
             ApiResponse<InlineResponse20012> localVarResponse = GetCustomerProfilesWithHttpInfo(pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Customer Profiles 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetCustomerProfilesWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?))
        {

            var localVarPath = "/v1/customers/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// List Customer Profiles 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetCustomerProfilesAsync (int? pageSize = default(int?), int? skip = default(int?))
        {
             ApiResponse<InlineResponse20012> localVarResponse = await GetCustomerProfilesAsyncWithHttpInfo(pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Customer Profiles 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetCustomerProfilesAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?))
        {

            var localVarPath = "/v1/customers/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomerProfiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// List customer profiles that match the given attributes Get a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GetCustomersByAttributes (ApplicationCustomerSearch applicationCustomerSearch, int? pageSize = default(int?), int? skip = default(int?))
        {
             ApiResponse<InlineResponse20012> localVarResponse = GetCustomersByAttributesWithHttpInfo(applicationCustomerSearch, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List customer profiles that match the given attributes Get a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> GetCustomersByAttributesWithHttpInfo (ApplicationCustomerSearch applicationCustomerSearch, int? pageSize = default(int?), int? skip = default(int?))
        {
            // verify the required parameter 'applicationCustomerSearch' is set
            if (applicationCustomerSearch == null)
                throw new ApiException(400, "Missing required parameter 'applicationCustomerSearch' when calling ManagementApi->GetCustomersByAttributes");

            var localVarPath = "/v1/customer_search/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (applicationCustomerSearch != null && applicationCustomerSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationCustomerSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationCustomerSearch; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomersByAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// List customer profiles that match the given attributes Get a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GetCustomersByAttributesAsync (ApplicationCustomerSearch applicationCustomerSearch, int? pageSize = default(int?), int? skip = default(int?))
        {
             ApiResponse<InlineResponse20012> localVarResponse = await GetCustomersByAttributesAsyncWithHttpInfo(applicationCustomerSearch, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List customer profiles that match the given attributes Get a list of all the customer profiles for the account that exactly match a set of attributes.  The match is successful if all the attributes of the request are found in a profile, even if the profile has more attributes that are not present on the request.  [Customer Profile]: https://help.talon.one/hc/en-us/articles/360005130739-Data-Model#/customerProfile 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationCustomerSearch"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GetCustomersByAttributesAsyncWithHttpInfo (ApplicationCustomerSearch applicationCustomerSearch, int? pageSize = default(int?), int? skip = default(int?))
        {
            // verify the required parameter 'applicationCustomerSearch' is set
            if (applicationCustomerSearch == null)
                throw new ApiException(400, "Missing required parameter 'applicationCustomerSearch' when calling ManagementApi->GetCustomersByAttributes");

            var localVarPath = "/v1/customer_search/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (applicationCustomerSearch != null && applicationCustomerSearch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(applicationCustomerSearch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = applicationCustomerSearch; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCustomersByAttributes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GetEventTypes (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse20025> localVarResponse = GetEventTypesWithHttpInfo(applicationIds, name, includeOldVersions, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public ApiResponse<InlineResponse20025> GetEventTypesWithHttpInfo (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            var localVarPath = "/v1/event_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationIds", applicationIds)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (includeOldVersions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeOldVersions", includeOldVersions)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GetEventTypesAsync (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse20025> localVarResponse = await GetEventTypesAsyncWithHttpInfo(applicationIds, name, includeOldVersions, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List event types Fetch all event type definitions for your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="name">Filter results to event types with the given name. This parameter implies &#x60;includeOldVersions&#x60;. (optional)</param>
        /// <param name="includeOldVersions">Include all versions of every event type. (optional, default to false)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GetEventTypesAsyncWithHttpInfo (string applicationIds = default(string), string name = default(string), bool? includeOldVersions = default(bool?), int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            var localVarPath = "/v1/event_types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationIds", applicationIds)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (includeOldVersions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeOldVersions", includeOldVersions)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEventTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20025>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20025) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20025)));
        }

        /// <summary>
        /// Get exports Get a list of all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 GetExports (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string))
        {
             ApiResponse<InlineResponse20028> localVarResponse = GetExportsWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get exports Get a list of all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public ApiResponse<InlineResponse20028> GetExportsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string))
        {

            var localVarPath = "/v1/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (entity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entity", entity)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Get exports Get a list of all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> GetExportsAsync (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string))
        {
             ApiResponse<InlineResponse20028> localVarResponse = await GetExportsAsyncWithHttpInfo(pageSize, skip, applicationId, campaignId, entity);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get exports Get a list of all past exports 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId"> (optional)</param>
        /// <param name="entity">The name of the entity type that was exported. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GetExportsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), int? applicationId = default(int?), int? campaignId = default(int?), string entity = default(string))
        {

            var localVarPath = "/v1/exports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (entity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entity", entity)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetExports", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20028>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20028) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20028)));
        }

        /// <summary>
        /// Get integration&#39;s Loyalty Ledger Get the Loyalty Ledger for this profile integration ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>LoyaltyLedger</returns>
        public LoyaltyLedger GetLoyaltyPoints (int programID, string integrationID)
        {
             ApiResponse<LoyaltyLedger> localVarResponse = GetLoyaltyPointsWithHttpInfo(programID, integrationID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get integration&#39;s Loyalty Ledger Get the Loyalty Ledger for this profile integration ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>ApiResponse of LoyaltyLedger</returns>
        public ApiResponse<LoyaltyLedger> GetLoyaltyPointsWithHttpInfo (int programID, string integrationID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyPoints");
            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->GetLoyaltyPoints");

            var localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (integrationID != null) localVarPathParams.Add("integrationID", this.Configuration.ApiClient.ParameterToString(integrationID)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyLedger>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoyaltyLedger) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyLedger)));
        }

        /// <summary>
        /// Get integration&#39;s Loyalty Ledger Get the Loyalty Ledger for this profile integration ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>Task of LoyaltyLedger</returns>
        public async System.Threading.Tasks.Task<LoyaltyLedger> GetLoyaltyPointsAsync (int programID, string integrationID)
        {
             ApiResponse<LoyaltyLedger> localVarResponse = await GetLoyaltyPointsAsyncWithHttpInfo(programID, integrationID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get integration&#39;s Loyalty Ledger Get the Loyalty Ledger for this profile integration ID.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID">The identifier for the application, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (LoyaltyLedger)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyLedger>> GetLoyaltyPointsAsyncWithHttpInfo (int programID, string integrationID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyPoints");
            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->GetLoyaltyPoints");

            var localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (integrationID != null) localVarPathParams.Add("integrationID", this.Configuration.ApiClient.ParameterToString(integrationID)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyLedger>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoyaltyLedger) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyLedger)));
        }

        /// <summary>
        /// Get a loyalty program Get a loyalty program.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>LoyaltyProgram</returns>
        public LoyaltyProgram GetLoyaltyProgram (int programID)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = GetLoyaltyProgramWithHttpInfo(programID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a loyalty program Get a loyalty program.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>ApiResponse of LoyaltyProgram</returns>
        public ApiResponse<LoyaltyProgram> GetLoyaltyProgramWithHttpInfo (int programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyProgram");

            var localVarPath = "/v1/loyalty_programs/{programID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// Get a loyalty program Get a loyalty program.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of LoyaltyProgram</returns>
        public async System.Threading.Tasks.Task<LoyaltyProgram> GetLoyaltyProgramAsync (int programID)
        {
             ApiResponse<LoyaltyProgram> localVarResponse = await GetLoyaltyProgramAsyncWithHttpInfo(programID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a loyalty program Get a loyalty program.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (LoyaltyProgram)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyProgram>> GetLoyaltyProgramAsyncWithHttpInfo (int programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyProgram");

            var localVarPath = "/v1/loyalty_programs/{programID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyProgram", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyProgram>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoyaltyProgram) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyProgram)));
        }

        /// <summary>
        /// List loyalty programs List all the loyalty programs.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 GetLoyaltyPrograms ()
        {
             ApiResponse<InlineResponse2007> localVarResponse = GetLoyaltyProgramsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List loyalty programs List all the loyalty programs.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> GetLoyaltyProgramsWithHttpInfo ()
        {

            var localVarPath = "/v1/loyalty_programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// List loyalty programs List all the loyalty programs.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> GetLoyaltyProgramsAsync ()
        {
             ApiResponse<InlineResponse2007> localVarResponse = await GetLoyaltyProgramsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List loyalty programs List all the loyalty programs.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> GetLoyaltyProgramsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/loyalty_programs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyPrograms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2007)));
        }

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>LoyaltyStatistics</returns>
        public LoyaltyStatistics GetLoyaltyStatistics (int programID)
        {
             ApiResponse<LoyaltyStatistics> localVarResponse = GetLoyaltyStatisticsWithHttpInfo(programID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>ApiResponse of LoyaltyStatistics</returns>
        public ApiResponse<LoyaltyStatistics> GetLoyaltyStatisticsWithHttpInfo (int programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyStatistics");

            var localVarPath = "/v1/loyalty_programs/{programID}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoyaltyStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyStatistics)));
        }

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of LoyaltyStatistics</returns>
        public async System.Threading.Tasks.Task<LoyaltyStatistics> GetLoyaltyStatisticsAsync (int programID)
        {
             ApiResponse<LoyaltyStatistics> localVarResponse = await GetLoyaltyStatisticsAsyncWithHttpInfo(programID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get loyalty program statistics by loyalty program ID 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <returns>Task of ApiResponse (LoyaltyStatistics)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LoyaltyStatistics>> GetLoyaltyStatisticsAsyncWithHttpInfo (int programID)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->GetLoyaltyStatistics");

            var localVarPath = "/v1/loyalty_programs/{programID}/statistics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoyaltyStatistics", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LoyaltyStatistics>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LoyaltyStatistics) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LoyaltyStatistics)));
        }

        /// <summary>
        /// List referrals (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 GetReferrals (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             ApiResponse<InlineResponse201> localVarResponse = GetReferralsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List referrals (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse<InlineResponse201> GetReferralsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetReferrals");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetReferrals");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (advocate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "advocate", advocate)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferrals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// List referrals (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> GetReferralsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             ApiResponse<InlineResponse201> localVarResponse = await GetReferralsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List referrals (with total count) 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> GetReferralsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetReferrals");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetReferrals");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (advocate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "advocate", advocate)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferrals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// List referrals 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 GetReferralsWithoutTotalCount (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             ApiResponse<InlineResponse2006> localVarResponse = GetReferralsWithoutTotalCountWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List referrals 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> GetReferralsWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetReferralsWithoutTotalCount");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetReferralsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (advocate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "advocate", advocate)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferralsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// List referrals 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> GetReferralsWithoutTotalCountAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
             ApiResponse<InlineResponse2006> localVarResponse = await GetReferralsWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort, code, createdBefore, createdAfter, valid, usable, advocate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List referrals 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="code">Filter results performing case-insensitive matching against the referral code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the referral creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches referrals in which the expiry date is set and in the past. The second matches referrals in which start date is null or in the past and expiry date is null or in the future, the third matches referrals in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only referrals where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only referrals where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="advocate">Filter results by match with a profile id specified in the referral&#39;s AdvocateProfileIntegrationId field (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> GetReferralsWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string code = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), string advocate = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetReferralsWithoutTotalCount");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetReferralsWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (code != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (advocate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "advocate", advocate)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReferralsWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Get information for the specified role 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Role</returns>
        public Role GetRole (int roleId)
        {
             ApiResponse<Role> localVarResponse = GetRoleWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information for the specified role 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse<Role> GetRoleWithHttpInfo (int roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling ManagementApi->GetRole");

            var localVarPath = "/v1/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Get information for the specified role 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> GetRoleAsync (int roleId)
        {
             ApiResponse<Role> localVarResponse = await GetRoleAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information for the specified role 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> GetRoleAsyncWithHttpInfo (int roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling ManagementApi->GetRole");

            var localVarPath = "/v1/roles/{roleId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (roleId != null) localVarPathParams.Add("roleId", this.Configuration.ApiClient.ParameterToString(roleId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRole", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Role>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Role) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Role)));
        }

        /// <summary>
        /// Get ruleset Retrieve the details of a ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Ruleset</returns>
        public Ruleset GetRuleset (int applicationId, int campaignId, int rulesetId)
        {
             ApiResponse<Ruleset> localVarResponse = GetRulesetWithHttpInfo(applicationId, campaignId, rulesetId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ruleset Retrieve the details of a ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        public ApiResponse<Ruleset> GetRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetRuleset");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetRuleset");
            // verify the required parameter 'rulesetId' is set
            if (rulesetId == null)
                throw new ApiException(400, "Missing required parameter 'rulesetId' when calling ManagementApi->GetRuleset");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (rulesetId != null) localVarPathParams.Add("rulesetId", this.Configuration.ApiClient.ParameterToString(rulesetId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ruleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Ruleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ruleset)));
        }

        /// <summary>
        /// Get ruleset Retrieve the details of a ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of Ruleset</returns>
        public async System.Threading.Tasks.Task<Ruleset> GetRulesetAsync (int applicationId, int campaignId, int rulesetId)
        {
             ApiResponse<Ruleset> localVarResponse = await GetRulesetAsyncWithHttpInfo(applicationId, campaignId, rulesetId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ruleset Retrieve the details of a ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ruleset>> GetRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetRuleset");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetRuleset");
            // verify the required parameter 'rulesetId' is set
            if (rulesetId == null)
                throw new ApiException(400, "Missing required parameter 'rulesetId' when calling ManagementApi->GetRuleset");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (rulesetId != null) localVarPathParams.Add("rulesetId", this.Configuration.ApiClient.ParameterToString(rulesetId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRuleset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ruleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Ruleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ruleset)));
        }

        /// <summary>
        /// List rulesets List all rulesets in the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetRulesets (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2003> localVarResponse = GetRulesetsWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List rulesets List all rulesets in the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GetRulesetsWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetRulesets");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetRulesets");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRulesets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// List rulesets List all rulesets in the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetRulesetsAsync (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse2003> localVarResponse = await GetRulesetsAsyncWithHttpInfo(applicationId, campaignId, pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List rulesets List all rulesets in the given campaign.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetRulesetsAsyncWithHttpInfo (int applicationId, int campaignId, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->GetRulesets");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->GetRulesets");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRulesets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get a single User Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>User</returns>
        public User GetUser (int userId)
        {
             ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single User Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> GetUserWithHttpInfo (int userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ManagementApi->GetUser");

            var localVarPath = "/v1/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// Get a single User Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (int userId)
        {
             ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a single User Retrieves the data (including an invitation code) for a user. Non-admin users can only get themselves. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (int userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling ManagementApi->GetUser");

            var localVarPath = "/v1/users/{userId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userId != null) localVarPathParams.Add("userId", this.Configuration.ApiClient.ParameterToString(userId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (User) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
        }

        /// <summary>
        /// List users Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GetUsers (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse20026> localVarResponse = GetUsersWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List users Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public ApiResponse<InlineResponse20026> GetUsersWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            var localVarPath = "/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// List users Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GetUsersAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {
             ApiResponse<InlineResponse20026> localVarResponse = await GetUsersAsyncWithHttpInfo(pageSize, skip, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List users Retrieve all users in your account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GetUsersAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string))
        {

            var localVarPath = "/v1/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20026>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20026) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20026)));
        }

        /// <summary>
        /// Get Webhook Returns an webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Webhook</returns>
        public Webhook GetWebhook (int webhookId)
        {
             ApiResponse<Webhook> localVarResponse = GetWebhookWithHttpInfo(webhookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Webhook Returns an webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>ApiResponse of Webhook</returns>
        public ApiResponse<Webhook> GetWebhookWithHttpInfo (int webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManagementApi->GetWebhook");

            var localVarPath = "/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// Get Webhook Returns an webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Task of Webhook</returns>
        public async System.Threading.Tasks.Task<Webhook> GetWebhookAsync (int webhookId)
        {
             ApiResponse<Webhook> localVarResponse = await GetWebhookAsyncWithHttpInfo(webhookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Webhook Returns an webhook by its id.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="webhookId"></param>
        /// <returns>Task of ApiResponse (Webhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webhook>> GetWebhookAsyncWithHttpInfo (int webhookId)
        {
            // verify the required parameter 'webhookId' is set
            if (webhookId == null)
                throw new ApiException(400, "Missing required parameter 'webhookId' when calling ManagementApi->GetWebhook");

            var localVarPath = "/v1/webhooks/{webhookId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webhookId != null) localVarPathParams.Add("webhookId", this.Configuration.ApiClient.ParameterToString(webhookId)); // path parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhook", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webhook>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Webhook) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webhook)));
        }

        /// <summary>
        /// List Webhook activation Log Entries Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GetWebhookActivationLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             ApiResponse<InlineResponse20023> localVarResponse = GetWebhookActivationLogsWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhook activation Log Entries Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public ApiResponse<InlineResponse20023> GetWebhookActivationLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            var localVarPath = "/v1/webhook_activation_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (integrationRequestUuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationRequestUuid", integrationRequestUuid)); // query parameter
            if (webhookId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "webhookId", webhookId)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookActivationLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// List Webhook activation Log Entries Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> GetWebhookActivationLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             ApiResponse<InlineResponse20023> localVarResponse = await GetWebhookActivationLogsAsyncWithHttpInfo(pageSize, skip, sort, integrationRequestUuid, webhookId, applicationId, campaignId, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Webhook activation Log Entries Webhook activation log entries would be created as soon as an integration request triggered an effect with a webhook
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="integrationRequestUuid">Filter results by integration request UUID. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="createdBefore">Only return events created before this date. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GetWebhookActivationLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string integrationRequestUuid = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            var localVarPath = "/v1/webhook_activation_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (integrationRequestUuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "integrationRequestUuid", integrationRequestUuid)); // query parameter
            if (webhookId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "webhookId", webhookId)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookActivationLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20023>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20023) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20023)));
        }

        /// <summary>
        /// List Webhook Log Entries 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GetWebhookLogs (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             ApiResponse<InlineResponse20024> localVarResponse = GetWebhookLogsWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhook Log Entries 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public ApiResponse<InlineResponse20024> GetWebhookLogsWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            var localVarPath = "/v1/webhook_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (webhookId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "webhookId", webhookId)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (requestUuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestUuid", requestUuid)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// List Webhook Log Entries 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GetWebhookLogsAsync (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {
             ApiResponse<InlineResponse20024> localVarResponse = await GetWebhookLogsAsyncWithHttpInfo(pageSize, skip, sort, status, webhookId, applicationId, campaignId, requestUuid, createdBefore, createdAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Webhook Log Entries 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="status">Filter results by HTTP status codes. (optional)</param>
        /// <param name="webhookId">Filter results by Webhook. (optional)</param>
        /// <param name="applicationId"> (optional)</param>
        /// <param name="campaignId">Filter results by campaign. (optional)</param>
        /// <param name="requestUuid">Filter results by request UUID. (optional)</param>
        /// <param name="createdBefore">Filter results where request and response times to return entries before parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results where request and response times to return entries after parameter value, expected to be an RFC3339 timestamp string. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GetWebhookLogsAsyncWithHttpInfo (int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string status = default(string), decimal? webhookId = default(decimal?), decimal? applicationId = default(decimal?), decimal? campaignId = default(decimal?), string requestUuid = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?))
        {

            var localVarPath = "/v1/webhook_logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (webhookId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "webhookId", webhookId)); // query parameter
            if (applicationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationId", applicationId)); // query parameter
            if (campaignId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignId", campaignId)); // query parameter
            if (requestUuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "requestUuid", requestUuid)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhookLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20024>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20024) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20024)));
        }

        /// <summary>
        /// List Webhooks 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GetWebhooks (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {
             ApiResponse<InlineResponse20022> localVarResponse = GetWebhooksWithHttpInfo(applicationIds, sort, pageSize, skip);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Webhooks 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public ApiResponse<InlineResponse20022> GetWebhooksWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {

            var localVarPath = "/v1/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationIds", applicationIds)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// List Webhooks 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GetWebhooksAsync (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {
             ApiResponse<InlineResponse20022> localVarResponse = await GetWebhooksAsyncWithHttpInfo(applicationIds, sort, pageSize, skip);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Webhooks 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationIds">Filter by one or more application ids separated by comma (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GetWebhooksAsyncWithHttpInfo (string applicationIds = default(string), string sort = default(string), int? pageSize = default(int?), int? skip = default(int?))
        {

            var localVarPath = "/v1/webhooks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "applicationIds", applicationIds)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebhooks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20022>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20022) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20022)));
        }

        /// <summary>
        /// Import coupons via CSV file Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportCoupons (int applicationId, int campaignId, string upfile = default(string))
        {
             ApiResponse<Import> localVarResponse = ImportCouponsWithHttpInfo(applicationId, campaignId, upfile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import coupons via CSV file Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public ApiResponse<Import> ImportCouponsWithHttpInfo (int applicationId, int campaignId, string upfile = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ImportCoupons");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->ImportCoupons");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (upfile != null) localVarFormParams.Add("upfile", this.Configuration.ApiClient.ParameterToString(upfile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Import>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Import) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Import)));
        }

        /// <summary>
        /// Import coupons via CSV file Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportCouponsAsync (int applicationId, int campaignId, string upfile = default(string))
        {
             ApiResponse<Import> localVarResponse = await ImportCouponsAsyncWithHttpInfo(applicationId, campaignId, upfile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import coupons via CSV file Upload a CSV file containing the coupons that should be created. The file should be sent as multipart data.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Import>> ImportCouponsAsyncWithHttpInfo (int applicationId, int campaignId, string upfile = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ImportCoupons");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->ImportCoupons");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/import_coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (upfile != null) localVarFormParams.Add("upfile", this.Configuration.ApiClient.ParameterToString(upfile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportCoupons", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Import>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Import) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Import)));
        }

        /// <summary>
        /// Import loyalty points via CSV file Upload a CSV file containing the loyalty points that should be created. The file should be sent as multipart data.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportLoyaltyPoints (int programID, string upFile = default(string))
        {
             ApiResponse<Import> localVarResponse = ImportLoyaltyPointsWithHttpInfo(programID, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import loyalty points via CSV file Upload a CSV file containing the loyalty points that should be created. The file should be sent as multipart data.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public ApiResponse<Import> ImportLoyaltyPointsWithHttpInfo (int programID, string upFile = default(string))
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ImportLoyaltyPoints");

            var localVarPath = "/v1/loyalty_programs/{programID}/import_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (upFile != null) localVarFormParams.Add("upFile", this.Configuration.ApiClient.ParameterToString(upFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Import>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Import) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Import)));
        }

        /// <summary>
        /// Import loyalty points via CSV file Upload a CSV file containing the loyalty points that should be created. The file should be sent as multipart data.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportLoyaltyPointsAsync (int programID, string upFile = default(string))
        {
             ApiResponse<Import> localVarResponse = await ImportLoyaltyPointsAsyncWithHttpInfo(programID, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import loyalty points via CSV file Upload a CSV file containing the loyalty points that should be created. The file should be sent as multipart data.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Import>> ImportLoyaltyPointsAsyncWithHttpInfo (int programID, string upFile = default(string))
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->ImportLoyaltyPoints");

            var localVarPath = "/v1/loyalty_programs/{programID}/import_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (upFile != null) localVarFormParams.Add("upFile", this.Configuration.ApiClient.ParameterToString(upFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Import>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Import) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Import)));
        }

        /// <summary>
        /// Import giveaways codes into a giveaways pool Upload a CSV file containing the giveaways codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaways attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportPoolGiveaways (int poolId, string upfile = default(string))
        {
             ApiResponse<Import> localVarResponse = ImportPoolGiveawaysWithHttpInfo(poolId, upfile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import giveaways codes into a giveaways pool Upload a CSV file containing the giveaways codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaways attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public ApiResponse<Import> ImportPoolGiveawaysWithHttpInfo (int poolId, string upfile = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling ManagementApi->ImportPoolGiveaways");

            var localVarPath = "/v1/giveaways/pools/{poolId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("poolId", this.Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (upfile != null) localVarFormParams.Add("upfile", this.Configuration.ApiClient.ParameterToString(upfile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportPoolGiveaways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Import>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Import) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Import)));
        }

        /// <summary>
        /// Import giveaways codes into a giveaways pool Upload a CSV file containing the giveaways codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaways attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportPoolGiveawaysAsync (int poolId, string upfile = default(string))
        {
             ApiResponse<Import> localVarResponse = await ImportPoolGiveawaysAsyncWithHttpInfo(poolId, upfile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import giveaways codes into a giveaways pool Upload a CSV file containing the giveaways codes that should be created. Send the file as multipart data.  The CSV file can contain the following columns: - &#x60;code&#x60; (required): the code of your giveaway, for instance, a gift card redemption code. - &#x60;startdate&#x60;:  the start date in RFC3339 of the code redemption period. - &#x60;enddate&#x60;: the last date in RFC3339 of the code redemption period. - &#x60;attributes&#x60;: A json object describing _custom_ giveaways attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;provider&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;provider\&quot;\&quot;: \&quot;\&quot;myPartnerCompany\&quot;\&quot;}\&quot;&#x60;.  The &#x60;startdate&#x60; and &#x60;enddate&#x60; have nothing to do with the _validity_ of the codes. They are only used by the Rule Engine to award the codes or not. You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="poolId"></param>
        /// <param name="upfile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Import>> ImportPoolGiveawaysAsyncWithHttpInfo (int poolId, string upfile = default(string))
        {
            // verify the required parameter 'poolId' is set
            if (poolId == null)
                throw new ApiException(400, "Missing required parameter 'poolId' when calling ManagementApi->ImportPoolGiveaways");

            var localVarPath = "/v1/giveaways/pools/{poolId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (poolId != null) localVarPathParams.Add("poolId", this.Configuration.ApiClient.ParameterToString(poolId)); // path parameter
            if (upfile != null) localVarFormParams.Add("upfile", this.Configuration.ApiClient.ParameterToString(upfile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportPoolGiveaways", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Import>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Import) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Import)));
        }

        /// <summary>
        /// Import referrals via CSV file Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following colums:  - &#x60;code&#x60; (required): the referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: the start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: the end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Import</returns>
        public Import ImportReferrals (int applicationId, int campaignId, string upFile = default(string))
        {
             ApiResponse<Import> localVarResponse = ImportReferralsWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import referrals via CSV file Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following colums:  - &#x60;code&#x60; (required): the referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: the start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: the end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>ApiResponse of Import</returns>
        public ApiResponse<Import> ImportReferralsWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ImportReferrals");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->ImportReferrals");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (upFile != null) localVarFormParams.Add("upFile", this.Configuration.ApiClient.ParameterToString(upFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportReferrals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Import>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Import) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Import)));
        }

        /// <summary>
        /// Import referrals via CSV file Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following colums:  - &#x60;code&#x60; (required): the referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: the start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: the end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of Import</returns>
        public async System.Threading.Tasks.Task<Import> ImportReferralsAsync (int applicationId, int campaignId, string upFile = default(string))
        {
             ApiResponse<Import> localVarResponse = await ImportReferralsAsyncWithHttpInfo(applicationId, campaignId, upFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import referrals via CSV file Upload a CSV file containing the referrals that should be created. The file should be sent as multipart data.  The CSV file can contain the following colums:  - &#x60;code&#x60; (required): the referral code. - &#x60;advocateprofileintegrationid&#x60; (required): The profile ID of the advocate. - &#x60;startdate&#x60;: the start date in RFC3339 of the code redemption period. - &#x60;expirydate&#x60;: the end date in RFC3339 of the code redemption period. - &#x60;limitval&#x60;: The maximum amount of redemptions of this code. Unlimited (0) when blank. - &#x60;attributes&#x60;: A json object describing _custom_ referral attribute names and their values. Double the double-quotes in the object.   For example, if you created a custom attribute called &#x60;category&#x60;, set it with &#x60;\&quot;{\&quot;\&quot;category\&quot;\&quot;: \&quot;\&quot;10_off\&quot;\&quot;}\&quot;&#x60;.  You can use the timezone of your choice. It is converted to UTC internally by Talon.One. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="upFile">The file with the information about the loyalty points that should be imported. (optional)</param>
        /// <returns>Task of ApiResponse (Import)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Import>> ImportReferralsAsyncWithHttpInfo (int applicationId, int campaignId, string upFile = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->ImportReferrals");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->ImportReferrals");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/import_referrals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (upFile != null) localVarFormParams.Add("upFile", this.Configuration.ApiClient.ParameterToString(upFile)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportReferrals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Import>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Import) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Import)));
        }

        /// <summary>
        /// Deduct points in a loyalty program for the specified customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns></returns>
        public void RemoveLoyaltyPoints (int programID, string integrationID, LoyaltyPoints loyaltyPoints)
        {
             RemoveLoyaltyPointsWithHttpInfo(programID, integrationID, loyaltyPoints);
        }

        /// <summary>
        /// Deduct points in a loyalty program for the specified customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveLoyaltyPointsWithHttpInfo (int programID, string integrationID, LoyaltyPoints loyaltyPoints)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->RemoveLoyaltyPoints");
            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->RemoveLoyaltyPoints");
            // verify the required parameter 'loyaltyPoints' is set
            if (loyaltyPoints == null)
                throw new ApiException(400, "Missing required parameter 'loyaltyPoints' when calling ManagementApi->RemoveLoyaltyPoints");

            var localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}/deduct_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (integrationID != null) localVarPathParams.Add("integrationID", this.Configuration.ApiClient.ParameterToString(integrationID)); // path parameter
            if (loyaltyPoints != null && loyaltyPoints.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loyaltyPoints); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loyaltyPoints; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Deduct points in a loyalty program for the specified customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveLoyaltyPointsAsync (int programID, string integrationID, LoyaltyPoints loyaltyPoints)
        {
             await RemoveLoyaltyPointsAsyncWithHttpInfo(programID, integrationID, loyaltyPoints);

        }

        /// <summary>
        /// Deduct points in a loyalty program for the specified customer 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="programID">The identifier for the loyalty program, must be unique within the account.</param>
        /// <param name="integrationID"></param>
        /// <param name="loyaltyPoints"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveLoyaltyPointsAsyncWithHttpInfo (int programID, string integrationID, LoyaltyPoints loyaltyPoints)
        {
            // verify the required parameter 'programID' is set
            if (programID == null)
                throw new ApiException(400, "Missing required parameter 'programID' when calling ManagementApi->RemoveLoyaltyPoints");
            // verify the required parameter 'integrationID' is set
            if (integrationID == null)
                throw new ApiException(400, "Missing required parameter 'integrationID' when calling ManagementApi->RemoveLoyaltyPoints");
            // verify the required parameter 'loyaltyPoints' is set
            if (loyaltyPoints == null)
                throw new ApiException(400, "Missing required parameter 'loyaltyPoints' when calling ManagementApi->RemoveLoyaltyPoints");

            var localVarPath = "/v1/loyalty_programs/{programID}/profile/{integrationID}/deduct_points";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (programID != null) localVarPathParams.Add("programID", this.Configuration.ApiClient.ParameterToString(programID)); // path parameter
            if (integrationID != null) localVarPathParams.Add("integrationID", this.Configuration.ApiClient.ParameterToString(integrationID)); // path parameter
            if (loyaltyPoints != null && loyaltyPoints.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(loyaltyPoints); // http body (model) parameter
            }
            else
            {
                localVarPostBody = loyaltyPoints; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveLoyaltyPoints", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>NewPassword</returns>
        public NewPassword ResetPassword (NewPassword newPassword)
        {
             ApiResponse<NewPassword> localVarResponse = ResetPasswordWithHttpInfo(newPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>ApiResponse of NewPassword</returns>
        public ApiResponse<NewPassword> ResetPasswordWithHttpInfo (NewPassword newPassword)
        {
            // verify the required parameter 'newPassword' is set
            if (newPassword == null)
                throw new ApiException(400, "Missing required parameter 'newPassword' when calling ManagementApi->ResetPassword");

            var localVarPath = "/v1/reset_password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newPassword != null && newPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newPassword; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewPassword>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NewPassword) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewPassword)));
        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>Task of NewPassword</returns>
        public async System.Threading.Tasks.Task<NewPassword> ResetPasswordAsync (NewPassword newPassword)
        {
             ApiResponse<NewPassword> localVarResponse = await ResetPasswordAsyncWithHttpInfo(newPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password Consumes the supplied password reset token and updates the password for the associated account. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="newPassword"></param>
        /// <returns>Task of ApiResponse (NewPassword)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NewPassword>> ResetPasswordAsyncWithHttpInfo (NewPassword newPassword)
        {
            // verify the required parameter 'newPassword' is set
            if (newPassword == null)
                throw new ApiException(400, "Missing required parameter 'newPassword' when calling ManagementApi->ResetPassword");

            var localVarPath = "/v1/reset_password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (newPassword != null && newPassword.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newPassword); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newPassword; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResetPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NewPassword>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NewPassword) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(NewPassword)));
        }

        /// <summary>
        /// List coupons that match the given attributes (with total count) Gets a list of all the coupons with attributes matching the query criteria 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 SearchCouponsAdvanced (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = SearchCouponsAdvancedWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes (with total count) Gets a list of all the coupons with attributes matching the query criteria 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> SearchCouponsAdvancedWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->SearchCouponsAdvanced");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->SearchCouponsAdvanced");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvanced");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCouponsAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons that match the given attributes (with total count) Gets a list of all the coupons with attributes matching the query criteria 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> SearchCouponsAdvancedAsync (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = await SearchCouponsAdvancedAsyncWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes (with total count) Gets a list of all the coupons with attributes matching the query criteria 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> SearchCouponsAdvancedAsyncWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->SearchCouponsAdvanced");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->SearchCouponsAdvanced");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvanced");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCouponsAdvanced", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count) Get a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 SearchCouponsAdvancedApplicationWide (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = SearchCouponsAdvancedApplicationWideWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count) Get a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> SearchCouponsAdvancedApplicationWideWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->SearchCouponsAdvancedApplicationWide");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWide");

            var localVarPath = "/v1/applications/{applicationId}/coupons_search_advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCouponsAdvancedApplicationWide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count) Get a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> SearchCouponsAdvancedApplicationWideAsync (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             ApiResponse<InlineResponse2004> localVarResponse = await SearchCouponsAdvancedApplicationWideAsyncWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application (with total count) Get a list of all the coupons with attributes matching the query criteria in all active campaigns of an application 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> SearchCouponsAdvancedApplicationWideAsyncWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->SearchCouponsAdvancedApplicationWide");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWide");

            var localVarPath = "/v1/applications/{applicationId}/coupons_search_advanced";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCouponsAdvancedApplicationWide", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application List of all the coupons with attributes matching the query criteria in all active campaigns of an application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 SearchCouponsAdvancedApplicationWideWithoutTotalCount (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             ApiResponse<InlineResponse2005> localVarResponse = SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application List of all the coupons with attributes matching the query criteria in all active campaigns of an application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> SearchCouponsAdvancedApplicationWideWithoutTotalCountWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/coupons_search_advanced/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCouponsAdvancedApplicationWideWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application List of all the coupons with attributes matching the query criteria in all active campaigns of an application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsync (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
             ApiResponse<InlineResponse2005> localVarResponse = await SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo(applicationId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, batchId, exactMatch, campaignState);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes in all active campaigns of an application List of all the coupons with attributes matching the query criteria in all active campaigns of an application. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="campaignState">Filter results by the state of the campaign. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchCouponsAdvancedApplicationWideWithoutTotalCountAsyncWithHttpInfo (int applicationId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), string batchId = default(string), bool? exactMatch = default(bool?), string campaignState = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedApplicationWideWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/coupons_search_advanced/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (campaignState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "campaignState", campaignState)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCouponsAdvancedApplicationWideWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// List coupons that match the given attributes List of all the coupons with attributes matching the query criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 SearchCouponsAdvancedWithoutTotalCount (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             ApiResponse<InlineResponse2005> localVarResponse = SearchCouponsAdvancedWithoutTotalCountWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List coupons that match the given attributes List of all the coupons with attributes matching the query criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> SearchCouponsAdvancedWithoutTotalCountWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCouponsAdvancedWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// List coupons that match the given attributes List of all the coupons with attributes matching the query criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> SearchCouponsAdvancedWithoutTotalCountAsync (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
             ApiResponse<InlineResponse2005> localVarResponse = await SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo(applicationId, campaignId, body, pageSize, skip, sort, value, createdBefore, createdAfter, valid, usable, referralId, recipientIntegrationId, exactMatch, batchId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List coupons that match the given attributes List of all the coupons with attributes matching the query criteria. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="body"></param>
        /// <param name="pageSize">The number of items to include in this response. When omitted, the maximum value of 1000 will be used. (optional)</param>
        /// <param name="skip">Skips the given number of items when paging through large result sets. (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="value">Filter results performing case-insensitive matching against the coupon code. Both the code and the query are folded to remove all non-alpha-numeric characters. (optional)</param>
        /// <param name="createdBefore">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="createdAfter">Filter results comparing the parameter value, expected to be an RFC3339 timestamp string, to the coupon creation timestamp. You can use any timezone. Talon.One will convert to UTC internally. (optional)</param>
        /// <param name="valid">Either \&quot;expired\&quot;, \&quot;validNow\&quot;, or \&quot;validFuture\&quot;. The first option matches coupons in which the expiry date is set and in the past. The second matches coupons in which start date is null or in the past and expiry date is null or in the future, the third matches coupons in which start date is set and in the future.  (optional)</param>
        /// <param name="usable">Either \&quot;true\&quot; or \&quot;false\&quot;. If \&quot;true\&quot;, only coupons where &#x60;usageCounter &lt; usageLimit&#x60; will be returned, \&quot;false\&quot; will return only coupons where &#x60;usageCounter &gt;&#x3D; usageLimit&#x60;.  (optional)</param>
        /// <param name="referralId">Filter the results by matching them with the Id of a referral, that meaning the coupons that had been created as an effect of the usage of a referral code. (optional)</param>
        /// <param name="recipientIntegrationId">Filter results by match with a profile id specified in the coupon&#39;s RecipientIntegrationId field (optional)</param>
        /// <param name="exactMatch">Filter results to an exact case-insensitive matching against the coupon code (optional, default to false)</param>
        /// <param name="batchId">Filter results by batches of coupons (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> SearchCouponsAdvancedWithoutTotalCountAsyncWithHttpInfo (int applicationId, int campaignId, Object body, int? pageSize = default(int?), int? skip = default(int?), string sort = default(string), string value = default(string), DateTime? createdBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), string valid = default(string), string usable = default(string), int? referralId = default(int?), string recipientIntegrationId = default(string), bool? exactMatch = default(bool?), string batchId = default(string))
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ManagementApi->SearchCouponsAdvancedWithoutTotalCount");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons_search_advanced/no_total";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (skip != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "skip", skip)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (value != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "value", value)); // query parameter
            if (createdBefore != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdBefore", createdBefore)); // query parameter
            if (createdAfter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdAfter", createdAfter)); // query parameter
            if (valid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "valid", valid)); // query parameter
            if (usable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "usable", usable)); // query parameter
            if (referralId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "referralId", referralId)); // query parameter
            if (recipientIntegrationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientIntegrationId", recipientIntegrationId)); // query parameter
            if (exactMatch != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exactMatch", exactMatch)); // query parameter
            if (batchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "batchId", batchId)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchCouponsAdvancedWithoutTotalCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Update an additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="newAdditionalCost"></param>
        /// <returns>AccountAdditionalCost</returns>
        public AccountAdditionalCost UpdateAdditionalCost (int additionalCostId, NewAdditionalCost newAdditionalCost)
        {
             ApiResponse<AccountAdditionalCost> localVarResponse = UpdateAdditionalCostWithHttpInfo(additionalCostId, newAdditionalCost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="newAdditionalCost"></param>
        /// <returns>ApiResponse of AccountAdditionalCost</returns>
        public ApiResponse<AccountAdditionalCost> UpdateAdditionalCostWithHttpInfo (int additionalCostId, NewAdditionalCost newAdditionalCost)
        {
            // verify the required parameter 'additionalCostId' is set
            if (additionalCostId == null)
                throw new ApiException(400, "Missing required parameter 'additionalCostId' when calling ManagementApi->UpdateAdditionalCost");
            // verify the required parameter 'newAdditionalCost' is set
            if (newAdditionalCost == null)
                throw new ApiException(400, "Missing required parameter 'newAdditionalCost' when calling ManagementApi->UpdateAdditionalCost");

            var localVarPath = "/v1/additional_costs/{additionalCostId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalCostId != null) localVarPathParams.Add("additionalCostId", this.Configuration.ApiClient.ParameterToString(additionalCostId)); // path parameter
            if (newAdditionalCost != null && newAdditionalCost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newAdditionalCost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newAdditionalCost; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAdditionalCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAdditionalCost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountAdditionalCost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAdditionalCost)));
        }

        /// <summary>
        /// Update an additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="newAdditionalCost"></param>
        /// <returns>Task of AccountAdditionalCost</returns>
        public async System.Threading.Tasks.Task<AccountAdditionalCost> UpdateAdditionalCostAsync (int additionalCostId, NewAdditionalCost newAdditionalCost)
        {
             ApiResponse<AccountAdditionalCost> localVarResponse = await UpdateAdditionalCostAsyncWithHttpInfo(additionalCostId, newAdditionalCost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an additional cost Updates an existing additional cost. Once created, the only property of an additional cost that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="additionalCostId"></param>
        /// <param name="newAdditionalCost"></param>
        /// <returns>Task of ApiResponse (AccountAdditionalCost)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AccountAdditionalCost>> UpdateAdditionalCostAsyncWithHttpInfo (int additionalCostId, NewAdditionalCost newAdditionalCost)
        {
            // verify the required parameter 'additionalCostId' is set
            if (additionalCostId == null)
                throw new ApiException(400, "Missing required parameter 'additionalCostId' when calling ManagementApi->UpdateAdditionalCost");
            // verify the required parameter 'newAdditionalCost' is set
            if (newAdditionalCost == null)
                throw new ApiException(400, "Missing required parameter 'newAdditionalCost' when calling ManagementApi->UpdateAdditionalCost");

            var localVarPath = "/v1/additional_costs/{additionalCostId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (additionalCostId != null) localVarPathParams.Add("additionalCostId", this.Configuration.ApiClient.ParameterToString(additionalCostId)); // path parameter
            if (newAdditionalCost != null && newAdditionalCost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newAdditionalCost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newAdditionalCost; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAdditionalCost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AccountAdditionalCost>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AccountAdditionalCost) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AccountAdditionalCost)));
        }

        /// <summary>
        /// Update a custom attribute Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="newAttribute"></param>
        /// <returns>Attribute</returns>
        public Attribute UpdateAttribute (int attributeId, NewAttribute newAttribute)
        {
             ApiResponse<Attribute> localVarResponse = UpdateAttributeWithHttpInfo(attributeId, newAttribute);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a custom attribute Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="newAttribute"></param>
        /// <returns>ApiResponse of Attribute</returns>
        public ApiResponse<Attribute> UpdateAttributeWithHttpInfo (int attributeId, NewAttribute newAttribute)
        {
            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
                throw new ApiException(400, "Missing required parameter 'attributeId' when calling ManagementApi->UpdateAttribute");
            // verify the required parameter 'newAttribute' is set
            if (newAttribute == null)
                throw new ApiException(400, "Missing required parameter 'newAttribute' when calling ManagementApi->UpdateAttribute");

            var localVarPath = "/v1/attributes/{attributeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeId != null) localVarPathParams.Add("attributeId", this.Configuration.ApiClient.ParameterToString(attributeId)); // path parameter
            if (newAttribute != null && newAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newAttribute; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Attribute) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attribute)));
        }

        /// <summary>
        /// Update a custom attribute Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="newAttribute"></param>
        /// <returns>Task of Attribute</returns>
        public async System.Threading.Tasks.Task<Attribute> UpdateAttributeAsync (int attributeId, NewAttribute newAttribute)
        {
             ApiResponse<Attribute> localVarResponse = await UpdateAttributeAsyncWithHttpInfo(attributeId, newAttribute);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a custom attribute Updates an existing custom attribute. Once created, the only property of a custom attribute that can be changed is the title (human readable description). This restriction is in place to prevent accidentally breaking live integrations. E.g. if you have a customer profile attribute with the name &#x60;region&#x60;, and your integration is sending &#x60;attributes.region&#x60; with customer profile updates, changing the name to &#x60;locale&#x60; would cause the integration requests to begin failing.  If you **really** need to change the &#x60;type&#x60; or &#x60;name&#x60; property of a custom attribute, create a new attribute and update any relevant integrations and rules to use the new attribute. Then delete the old attribute when you are confident you have migrated any needed data from the old attribute to the new one. 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attributeId"></param>
        /// <param name="newAttribute"></param>
        /// <returns>Task of ApiResponse (Attribute)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Attribute>> UpdateAttributeAsyncWithHttpInfo (int attributeId, NewAttribute newAttribute)
        {
            // verify the required parameter 'attributeId' is set
            if (attributeId == null)
                throw new ApiException(400, "Missing required parameter 'attributeId' when calling ManagementApi->UpdateAttribute");
            // verify the required parameter 'newAttribute' is set
            if (newAttribute == null)
                throw new ApiException(400, "Missing required parameter 'newAttribute' when calling ManagementApi->UpdateAttribute");

            var localVarPath = "/v1/attributes/{attributeId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attributeId != null) localVarPathParams.Add("attributeId", this.Configuration.ApiClient.ParameterToString(attributeId)); // path parameter
            if (newAttribute != null && newAttribute.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newAttribute); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newAttribute; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateAttribute", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Attribute>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Attribute) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Attribute)));
        }

        /// <summary>
        /// Update campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign"></param>
        /// <returns>Campaign</returns>
        public Campaign UpdateCampaign (int applicationId, int campaignId, UpdateCampaign updateCampaign)
        {
             ApiResponse<Campaign> localVarResponse = UpdateCampaignWithHttpInfo(applicationId, campaignId, updateCampaign);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign"></param>
        /// <returns>ApiResponse of Campaign</returns>
        public ApiResponse<Campaign> UpdateCampaignWithHttpInfo (int applicationId, int campaignId, UpdateCampaign updateCampaign)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateCampaign");
            // verify the required parameter 'updateCampaign' is set
            if (updateCampaign == null)
                throw new ApiException(400, "Missing required parameter 'updateCampaign' when calling ManagementApi->UpdateCampaign");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (updateCampaign != null && updateCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCampaign; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// Update campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign"></param>
        /// <returns>Task of Campaign</returns>
        public async System.Threading.Tasks.Task<Campaign> UpdateCampaignAsync (int applicationId, int campaignId, UpdateCampaign updateCampaign)
        {
             ApiResponse<Campaign> localVarResponse = await UpdateCampaignAsyncWithHttpInfo(applicationId, campaignId, updateCampaign);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update campaign 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCampaign"></param>
        /// <returns>Task of ApiResponse (Campaign)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Campaign>> UpdateCampaignAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCampaign updateCampaign)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateCampaign");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateCampaign");
            // verify the required parameter 'updateCampaign' is set
            if (updateCampaign == null)
                throw new ApiException(400, "Missing required parameter 'updateCampaign' when calling ManagementApi->UpdateCampaign");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (updateCampaign != null && updateCampaign.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCampaign); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCampaign; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Campaign>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Campaign) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Campaign)));
        }

        /// <summary>
        /// Update coupon 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="updateCoupon"></param>
        /// <returns>Coupon</returns>
        public Coupon UpdateCoupon (int applicationId, int campaignId, string couponId, UpdateCoupon updateCoupon)
        {
             ApiResponse<Coupon> localVarResponse = UpdateCouponWithHttpInfo(applicationId, campaignId, couponId, updateCoupon);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update coupon 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="updateCoupon"></param>
        /// <returns>ApiResponse of Coupon</returns>
        public ApiResponse<Coupon> UpdateCouponWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon updateCoupon)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateCoupon");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateCoupon");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->UpdateCoupon");
            // verify the required parameter 'updateCoupon' is set
            if (updateCoupon == null)
                throw new ApiException(400, "Missing required parameter 'updateCoupon' when calling ManagementApi->UpdateCoupon");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (couponId != null) localVarPathParams.Add("couponId", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter
            if (updateCoupon != null && updateCoupon.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCoupon); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCoupon; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Update coupon 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="updateCoupon"></param>
        /// <returns>Task of Coupon</returns>
        public async System.Threading.Tasks.Task<Coupon> UpdateCouponAsync (int applicationId, int campaignId, string couponId, UpdateCoupon updateCoupon)
        {
             ApiResponse<Coupon> localVarResponse = await UpdateCouponAsyncWithHttpInfo(applicationId, campaignId, couponId, updateCoupon);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update coupon 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="couponId">The ID of the coupon code to update</param>
        /// <param name="updateCoupon"></param>
        /// <returns>Task of ApiResponse (Coupon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Coupon>> UpdateCouponAsyncWithHttpInfo (int applicationId, int campaignId, string couponId, UpdateCoupon updateCoupon)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateCoupon");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateCoupon");
            // verify the required parameter 'couponId' is set
            if (couponId == null)
                throw new ApiException(400, "Missing required parameter 'couponId' when calling ManagementApi->UpdateCoupon");
            // verify the required parameter 'updateCoupon' is set
            if (updateCoupon == null)
                throw new ApiException(400, "Missing required parameter 'updateCoupon' when calling ManagementApi->UpdateCoupon");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons/{couponId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (couponId != null) localVarPathParams.Add("couponId", this.Configuration.ApiClient.ParameterToString(couponId)); // path parameter
            if (updateCoupon != null && updateCoupon.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCoupon); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCoupon; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCoupon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Coupon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Coupon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Coupon)));
        }

        /// <summary>
        /// Update a batch of coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCouponBatch"></param>
        /// <returns></returns>
        public void UpdateCouponBatch (int applicationId, int campaignId, UpdateCouponBatch updateCouponBatch)
        {
             UpdateCouponBatchWithHttpInfo(applicationId, campaignId, updateCouponBatch);
        }

        /// <summary>
        /// Update a batch of coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCouponBatch"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateCouponBatchWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch updateCouponBatch)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateCouponBatch");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateCouponBatch");
            // verify the required parameter 'updateCouponBatch' is set
            if (updateCouponBatch == null)
                throw new ApiException(400, "Missing required parameter 'updateCouponBatch' when calling ManagementApi->UpdateCouponBatch");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (updateCouponBatch != null && updateCouponBatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCouponBatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCouponBatch; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCouponBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update a batch of coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCouponBatch"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateCouponBatchAsync (int applicationId, int campaignId, UpdateCouponBatch updateCouponBatch)
        {
             await UpdateCouponBatchAsyncWithHttpInfo(applicationId, campaignId, updateCouponBatch);

        }

        /// <summary>
        /// Update a batch of coupons 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="updateCouponBatch"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCouponBatchAsyncWithHttpInfo (int applicationId, int campaignId, UpdateCouponBatch updateCouponBatch)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateCouponBatch");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateCouponBatch");
            // verify the required parameter 'updateCouponBatch' is set
            if (updateCouponBatch == null)
                throw new ApiException(400, "Missing required parameter 'updateCouponBatch' when calling ManagementApi->UpdateCouponBatch");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/coupons";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (updateCouponBatch != null && updateCouponBatch.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCouponBatch); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCouponBatch; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateCouponBatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update referral 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="updateReferral"></param>
        /// <returns>Referral</returns>
        public Referral UpdateReferral (int applicationId, int campaignId, string referralId, UpdateReferral updateReferral)
        {
             ApiResponse<Referral> localVarResponse = UpdateReferralWithHttpInfo(applicationId, campaignId, referralId, updateReferral);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update referral 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="updateReferral"></param>
        /// <returns>ApiResponse of Referral</returns>
        public ApiResponse<Referral> UpdateReferralWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral updateReferral)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateReferral");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateReferral");
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->UpdateReferral");
            // verify the required parameter 'updateReferral' is set
            if (updateReferral == null)
                throw new ApiException(400, "Missing required parameter 'updateReferral' when calling ManagementApi->UpdateReferral");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (referralId != null) localVarPathParams.Add("referralId", this.Configuration.ApiClient.ParameterToString(referralId)); // path parameter
            if (updateReferral != null && updateReferral.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateReferral); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateReferral; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReferral", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Referral>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Referral) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Referral)));
        }

        /// <summary>
        /// Update referral 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="updateReferral"></param>
        /// <returns>Task of Referral</returns>
        public async System.Threading.Tasks.Task<Referral> UpdateReferralAsync (int applicationId, int campaignId, string referralId, UpdateReferral updateReferral)
        {
             ApiResponse<Referral> localVarResponse = await UpdateReferralAsyncWithHttpInfo(applicationId, campaignId, referralId, updateReferral);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update referral 
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="referralId">The ID of the referral code to delete</param>
        /// <param name="updateReferral"></param>
        /// <returns>Task of ApiResponse (Referral)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Referral>> UpdateReferralAsyncWithHttpInfo (int applicationId, int campaignId, string referralId, UpdateReferral updateReferral)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateReferral");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateReferral");
            // verify the required parameter 'referralId' is set
            if (referralId == null)
                throw new ApiException(400, "Missing required parameter 'referralId' when calling ManagementApi->UpdateReferral");
            // verify the required parameter 'updateReferral' is set
            if (updateReferral == null)
                throw new ApiException(400, "Missing required parameter 'updateReferral' when calling ManagementApi->UpdateReferral");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/referrals/{referralId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (referralId != null) localVarPathParams.Add("referralId", this.Configuration.ApiClient.ParameterToString(referralId)); // path parameter
            if (updateReferral != null && updateReferral.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateReferral); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateReferral; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReferral", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Referral>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Referral) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Referral)));
        }

        /// <summary>
        /// Update ruleset Update the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Ruleset</returns>
        public Ruleset UpdateRuleset (int applicationId, int campaignId, int rulesetId, NewRuleset newRuleset)
        {
             ApiResponse<Ruleset> localVarResponse = UpdateRulesetWithHttpInfo(applicationId, campaignId, rulesetId, newRuleset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update ruleset Update the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>ApiResponse of Ruleset</returns>
        public ApiResponse<Ruleset> UpdateRulesetWithHttpInfo (int applicationId, int campaignId, int rulesetId, NewRuleset newRuleset)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateRuleset");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateRuleset");
            // verify the required parameter 'rulesetId' is set
            if (rulesetId == null)
                throw new ApiException(400, "Missing required parameter 'rulesetId' when calling ManagementApi->UpdateRuleset");
            // verify the required parameter 'newRuleset' is set
            if (newRuleset == null)
                throw new ApiException(400, "Missing required parameter 'newRuleset' when calling ManagementApi->UpdateRuleset");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (rulesetId != null) localVarPathParams.Add("rulesetId", this.Configuration.ApiClient.ParameterToString(rulesetId)); // path parameter
            if (newRuleset != null && newRuleset.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newRuleset); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newRuleset; // byte array
            }

            // authentication (manager_auth) required
            // http beerer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRuleset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ruleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Ruleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ruleset)));
        }

        /// <summary>
        /// Update ruleset Update the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Task of Ruleset</returns>
        public async System.Threading.Tasks.Task<Ruleset> UpdateRulesetAsync (int applicationId, int campaignId, int rulesetId, NewRuleset newRuleset)
        {
             ApiResponse<Ruleset> localVarResponse = await UpdateRulesetAsyncWithHttpInfo(applicationId, campaignId, rulesetId, newRuleset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update ruleset Update the specified ruleset.
        /// </summary>
        /// <exception cref="TalonOne.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId"></param>
        /// <param name="campaignId"></param>
        /// <param name="rulesetId"></param>
        /// <param name="newRuleset"></param>
        /// <returns>Task of ApiResponse (Ruleset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Ruleset>> UpdateRulesetAsyncWithHttpInfo (int applicationId, int campaignId, int rulesetId, NewRuleset newRuleset)
        {
            // verify the required parameter 'applicationId' is set
            if (applicationId == null)
                throw new ApiException(400, "Missing required parameter 'applicationId' when calling ManagementApi->UpdateRuleset");
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
                throw new ApiException(400, "Missing required parameter 'campaignId' when calling ManagementApi->UpdateRuleset");
            // verify the required parameter 'rulesetId' is set
            if (rulesetId == null)
                throw new ApiException(400, "Missing required parameter 'rulesetId' when calling ManagementApi->UpdateRuleset");
            // verify the required parameter 'newRuleset' is set
            if (newRuleset == null)
                throw new ApiException(400, "Missing required parameter 'newRuleset' when calling ManagementApi->UpdateRuleset");

            var localVarPath = "/v1/applications/{applicationId}/campaigns/{campaignId}/rulesets/{rulesetId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (applicationId != null) localVarPathParams.Add("applicationId", this.Configuration.ApiClient.ParameterToString(applicationId)); // path parameter
            if (campaignId != null) localVarPathParams.Add("campaignId", this.Configuration.ApiClient.ParameterToString(campaignId)); // path parameter
            if (rulesetId != null) localVarPathParams.Add("rulesetId", this.Configuration.ApiClient.ParameterToString(rulesetId)); // path parameter
            if (newRuleset != null && newRuleset.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(newRuleset); // http body (model) parameter
            }
            else
            {
                localVarPostBody = newRuleset; // byte array
            }

            // authentication (manager_auth) required
            // http bearer authentication required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRuleset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Ruleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Ruleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Ruleset)));
        }

    }
}
